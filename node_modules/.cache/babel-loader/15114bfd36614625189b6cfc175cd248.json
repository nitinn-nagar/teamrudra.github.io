{"ast":null,"code":"/**\n * Particles component for A-Frame.\n *\n * ShaderParticleEngine by Squarefeet (https://github.com/squarefeet).\n */\nvar SPE = require('./lib/SPE.js');\n\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\nAFRAME.registerComponent('particle-system', {\n  schema: {\n    preset: {\n      type: 'string',\n      \"default\": '',\n      oneOf: ['default', 'dust', 'snow', 'rain']\n    },\n    maxAge: {\n      type: 'number',\n      \"default\": 6\n    },\n    positionSpread: {\n      type: 'vec3',\n      \"default\": {\n        x: 0,\n        y: 0,\n        z: 0\n      }\n    },\n    type: {\n      type: 'number',\n      \"default\": SPE.distributions.BOX\n    },\n    rotationAxis: {\n      type: 'string',\n      \"default\": 'x'\n    },\n    rotationAngle: {\n      type: 'number',\n      \"default\": 0\n    },\n    rotationAngleSpread: {\n      type: 'number',\n      \"default\": 0\n    },\n    accelerationValue: {\n      type: 'vec3',\n      \"default\": {\n        x: 0,\n        y: -10,\n        z: 0\n      }\n    },\n    accelerationSpread: {\n      type: 'vec3',\n      \"default\": {\n        x: 10,\n        y: 0,\n        z: 10\n      }\n    },\n    velocityValue: {\n      type: 'vec3',\n      \"default\": {\n        x: 0,\n        y: 25,\n        z: 0\n      }\n    },\n    velocitySpread: {\n      type: 'vec3',\n      \"default\": {\n        x: 10,\n        y: 7.5,\n        z: 10\n      }\n    },\n    dragValue: {\n      type: 'number',\n      \"default\": 0\n    },\n    dragSpread: {\n      type: 'number',\n      \"default\": 0\n    },\n    dragRandomise: {\n      type: 'boolean',\n      \"default\": false\n    },\n    color: {\n      type: 'array',\n      \"default\": ['#0000FF', '#FF0000']\n    },\n    size: {\n      type: 'number',\n      \"default\": 1\n    },\n    direction: {\n      type: 'number',\n      \"default\": 1\n    },\n    duration: {\n      type: 'number',\n      \"default\": null\n    },\n    particleCount: {\n      type: 'number',\n      \"default\": 1000\n    },\n    texture: {\n      type: 'asset',\n      \"default\": 'https://cdn.rawgit.com/IdeaSpaceVR/aframe-particle-system-component/master/dist/images/star2.png'\n    },\n    randomise: {\n      type: 'boolean',\n      \"default\": false\n    },\n    opacity: {\n      type: 'array',\n      \"default\": ['1']\n    },\n    maxParticleCount: {\n      type: 'number',\n      \"default\": 250000\n    },\n    blending: {\n      type: 'number',\n      \"default\": THREE.AdditiveBlending,\n      oneOf: [THREE.NoBlending, THREE.NormalBlending, THREE.AdditiveBlending, THREE.SubtractiveBlending, THREE.MultiplyBlending]\n    },\n    enabled: {\n      type: 'boolean',\n      \"default\": true\n    }\n  },\n  init: function init() {\n    this.presets = {};\n    /* preset settings can be overwritten */\n\n    this.presets['dust'] = {\n      maxAge: 20,\n      positionSpread: {\n        x: 100,\n        y: 100,\n        z: 100\n      },\n      rotationAngle: 3.14,\n      accelerationValue: {\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      accelerationSpread: {\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      velocityValue: {\n        x: 1,\n        y: 0.3,\n        z: 1\n      },\n      velocitySpread: {\n        x: 0.5,\n        y: 1,\n        z: 0.5\n      },\n      color: ['#FFFFFF'],\n      particleCount: 100,\n      texture: 'https://cdn.rawgit.com/IdeaSpaceVR/aframe-particle-system-component/master/dist/images/smokeparticle.png'\n    };\n    this.presets['snow'] = {\n      maxAge: 20,\n      positionSpread: {\n        x: 100,\n        y: 100,\n        z: 100\n      },\n      rotationAngle: 3.14,\n      accelerationValue: {\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      accelerationSpread: {\n        x: 0.2,\n        y: 0,\n        z: 0.2\n      },\n      velocityValue: {\n        x: 0,\n        y: 8,\n        z: 0\n      },\n      velocitySpread: {\n        x: 2,\n        y: 0,\n        z: 2\n      },\n      color: ['#FFFFFF'],\n      particleCount: 200,\n      texture: 'https://cdn.rawgit.com/IdeaSpaceVR/aframe-particle-system-component/master/dist/images/smokeparticle.png'\n    };\n    this.presets['rain'] = {\n      maxAge: 1,\n      positionSpread: {\n        x: 100,\n        y: 100,\n        z: 100\n      },\n      rotationAngle: 3.14,\n      accelerationValue: {\n        x: 0,\n        y: 3,\n        z: 0\n      },\n      accelerationSpread: {\n        x: 2,\n        y: 1,\n        z: 2\n      },\n      velocityValue: {\n        x: 0,\n        y: 75,\n        z: 0\n      },\n      velocitySpread: {\n        x: 10,\n        y: 50,\n        z: 10\n      },\n      color: ['#FFFFFF'],\n      size: 0.4,\n      texture: 'https://cdn.rawgit.com/IdeaSpaceVR/aframe-particle-system-component/master/dist/images/raindrop.png'\n    };\n  },\n  update: function update(oldData) {\n    // Remove old particle group.\n    if (this.particleGroup) {\n      this.el.removeObject3D('particle-system');\n    } // Set the selected preset, if any, or use an empty object to keep schema defaults\n\n\n    this.preset = this.presets[this.data.preset] || {}; // Get custom, preset, or default data for each property defined in the schema\n\n    for (var key in this.data) {\n      this.data[key] = this.applyPreset(key);\n    }\n\n    this.initParticleSystem(this.data);\n\n    if (this.data.enabled === true) {\n      this.startParticles();\n    } else {\n      this.stopParticles();\n    }\n  },\n  applyPreset: function applyPreset(key) {\n    // !this.attrValue[key] = the user did not set a custom value\n    // this.preset[key] = there exists a value for this key in the selected preset\n    if (!this.attrValue[key] && this.preset[key]) {\n      return this.preset[key];\n    } else {\n      // Otherwise stick to the user or schema default value\n      return this.data[key];\n    }\n  },\n  tick: function tick(time, dt) {\n    this.particleGroup.tick(dt / 1000);\n  },\n  remove: function remove() {\n    // Remove particle system.\n    if (!this.particleGroup) {\n      return;\n    }\n\n    this.el.removeObject3D('particle-system');\n  },\n  startParticles: function startParticles() {\n    this.particleGroup.emitters.forEach(function (em) {\n      em.enable();\n    });\n  },\n  stopParticles: function stopParticles() {\n    this.particleGroup.emitters.forEach(function (em) {\n      em.disable();\n    });\n  },\n  initParticleSystem: function initParticleSystem(settings) {\n    var loader = new THREE.TextureLoader();\n    var particle_texture = loader.load(settings.texture, function (texture) {\n      return texture;\n    }, function (xhr) {\n      console.log(xhr.loaded / xhr.total * 100 + '% loaded');\n    }, function (xhr) {\n      console.log('An error occurred');\n    });\n    this.particleGroup = new SPE.Group({\n      texture: {\n        value: particle_texture\n      },\n      maxParticleCount: settings.maxParticleCount,\n      blending: settings.blending\n    });\n    var emitter = new SPE.Emitter({\n      maxAge: {\n        value: settings.maxAge\n      },\n      type: {\n        value: settings.type\n      },\n      position: {\n        spread: new THREE.Vector3(settings.positionSpread.x, settings.positionSpread.y, settings.positionSpread.z),\n        randomise: settings.randomise //spreadClamp: new THREE.Vector3( 2, 2, 2 ),\n        //radius: 4\n\n      },\n      rotation: {\n        axis: settings.rotationAxis == 'x' ? new THREE.Vector3(1, 0, 0) : settings.rotationAxis == 'y' ? new THREE.Vector3(0, 1, 0) : settings.rotationAxis == 'z' ? new THREE.Vector3(0, 0, 1) : new THREE.Vector3(0, 1, 0),\n        angle: settings.rotationAngle,\n        angleSpread: settings.rotationAngleSpread,\n        \"static\": true\n      },\n      acceleration: {\n        value: new THREE.Vector3(settings.accelerationValue.x, settings.accelerationValue.y, settings.accelerationValue.z),\n        spread: new THREE.Vector3(settings.accelerationSpread.x, settings.accelerationSpread.y, settings.accelerationSpread.z)\n      },\n      velocity: {\n        value: new THREE.Vector3(settings.velocityValue.x, settings.velocityValue.y, settings.velocityValue.z),\n        spread: new THREE.Vector3(settings.velocitySpread.x, settings.velocitySpread.y, settings.velocitySpread.z)\n      },\n      drag: {\n        value: new THREE.Vector3(settings.dragValue.x, settings.dragValue.y, settings.dragValue.z),\n        spread: new THREE.Vector3(settings.dragSpread.x, settings.dragSpread.y, settings.dragSpread.z),\n        randomise: settings.dragRandomise\n      },\n      color: {\n        value: settings.color.map(function (c) {\n          return new THREE.Color(c);\n        })\n      },\n      size: {\n        value: settings.size\n      },\n\n      /*wiggle: { value: 4, spread: 2 }, //settings.wiggle,*/\n\n      /*drag: {\n          value: settings.drag\n      },*/\n      direction: {\n        value: settings.direction\n      },\n      duration: settings.duration,\n      opacity: {\n        value: settings.opacity.map(function (o) {\n          return parseFloat(o);\n        })\n      },\n      particleCount: settings.particleCount\n    });\n    this.particleGroup.addEmitter(emitter);\n    this.particleGroup.mesh.frustumCulled = false;\n    this.el.setObject3D('particle-system', this.particleGroup.mesh);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}