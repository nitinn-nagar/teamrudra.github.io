{"ast":null,"code":"/* shader-particle-engine 1.0.5\n *\n * (c) 2015 Luke Moody (http://www.github.com/squarefeet)\n *     Originally based on Lee Stemkoski's original work (https://github.com/stemkoski/stemkoski.github.com/blob/master/Three.js/js/ParticleEngine.js).\n *\n * shader-particle-engine may be freely distributed under the MIT license (See LICENSE at root of this repository.)\n */\n\n/**\n * @typedef {Number} distribution\n * @property {Number} SPE.distributions.BOX Values will be distributed within a box.\n * @property {Number} SPE.distributions.SPHERE Values will be distributed within a sphere.\n * @property {Number} SPE.distributions.DISC Values will be distributed within a 2D disc.\n */\n\n/**\n * Namespace for Shader Particle Engine.\n *\n * All SPE-related code sits under this namespace.\n *\n * @type {Object}\n * @namespace\n */\nvar SPE = {\n  /**\n   * A map of supported distribution types used\n   * by SPE.Emitter instances.\n   *\n   * These distribution types can be applied to\n   * an emitter globally, which will affect the\n   * `position`, `velocity`, and `acceleration`\n   * value calculations for an emitter, or they\n   * can be applied on a per-property basis.\n   *\n   * @enum {Number}\n   */\n  distributions: {\n    /**\n     * Values will be distributed within a box.\n     * @type {Number}\n     */\n    BOX: 1,\n\n    /**\n     * Values will be distributed on a sphere.\n     * @type {Number}\n     */\n    SPHERE: 2,\n\n    /**\n     * Values will be distributed on a 2d-disc shape.\n     * @type {Number}\n     */\n    DISC: 3\n  },\n\n  /**\n   * Set this value to however many 'steps' you\n   * want value-over-lifetime properties to have.\n   *\n   * It's adjustable to fix an interpolation problem:\n   *\n   * Assuming you specify an opacity value as [0, 1, 0]\n   *      and the `valueOverLifetimeLength` is 4, then the\n   *      opacity value array will be reinterpolated to\n   *      be [0, 0.66, 0.66, 0].\n   *   This isn't ideal, as particles would never reach\n   *   full opacity.\n   *\n   * NOTE:\n   *     This property affects the length of ALL\n   *       value-over-lifetime properties for ALL\n   *       emitters and ALL groups.\n   *\n   *     Only values >= 3 && <= 4 are allowed.\n   *\n   * @type {Number}\n   */\n  valueOverLifetimeLength: 4\n}; // Module loader support:\n\nif (typeof define === 'function' && define.amd) {\n  define('spe', SPE);\n} else if (typeof exports !== 'undefined' && typeof module !== 'undefined') {\n  module.exports = SPE;\n}\n/**\n * A helper class for TypedArrays.\n *\n * Allows for easy resizing, assignment of various component-based\n * types (Vector2s, Vector3s, Vector4s, Mat3s, Mat4s),\n * as well as Colors (where components are `r`, `g`, `b`),\n * Numbers, and setting from other TypedArrays.\n *\n * @author Luke Moody\n * @constructor\n * @param {Function} TypedArrayConstructor The constructor to use (Float32Array, Uint8Array, etc.)\n * @param {Number} size                 The size of the array to create\n * @param {Number} componentSize        The number of components per-value (ie. 3 for a vec3, 9 for a Mat3, etc.)\n * @param {Number} indexOffset          The index in the array from which to start assigning values. Default `0` if none provided\n */\n\n\nSPE.TypedArrayHelper = function (TypedArrayConstructor, size, componentSize, indexOffset) {\n  'use strict';\n\n  this.componentSize = componentSize || 1;\n  this.size = size || 1;\n  this.TypedArrayConstructor = TypedArrayConstructor || Float32Array;\n  this.array = new TypedArrayConstructor(size * this.componentSize);\n  this.indexOffset = indexOffset || 0;\n};\n\nSPE.TypedArrayHelper.constructor = SPE.TypedArrayHelper;\n/**\n * Sets the size of the internal array.\n *\n * Delegates to `this.shrink` or `this.grow` depending on size\n * argument's relation to the current size of the internal array.\n *\n * Note that if the array is to be shrunk, data will be lost.\n *\n * @param {Number} size The new size of the array.\n */\n\nSPE.TypedArrayHelper.prototype.setSize = function (size, noComponentMultiply) {\n  'use strict';\n\n  var currentArraySize = this.array.length;\n\n  if (!noComponentMultiply) {\n    size = size * this.componentSize;\n  }\n\n  if (size < currentArraySize) {\n    return this.shrink(size);\n  } else if (size > currentArraySize) {\n    return this.grow(size);\n  } else {\n    console.info('TypedArray is already of size:', size + '.', 'Will not resize.');\n  }\n};\n/**\n * Shrinks the internal array.\n *\n * @param  {Number} size The new size of the typed array. Must be smaller than `this.array.length`.\n * @return {SPE.TypedArrayHelper}      Instance of this class.\n */\n\n\nSPE.TypedArrayHelper.prototype.shrink = function (size) {\n  'use strict';\n\n  this.array = this.array.subarray(0, size);\n  this.size = size;\n  return this;\n};\n/**\n * Grows the internal array.\n * @param  {Number} size The new size of the typed array. Must be larger than `this.array.length`.\n * @return {SPE.TypedArrayHelper}      Instance of this class.\n */\n\n\nSPE.TypedArrayHelper.prototype.grow = function (size) {\n  'use strict';\n\n  var existingArray = this.array,\n      newArray = new this.TypedArrayConstructor(size);\n  newArray.set(existingArray);\n  this.array = newArray;\n  this.size = size;\n  return this;\n};\n/**\n * Perform a splice operation on this array's buffer.\n * @param  {Number} start The start index of the splice. Will be multiplied by the number of components for this attribute.\n * @param  {Number} end The end index of the splice. Will be multiplied by the number of components for this attribute.\n * @returns {Object} The SPE.TypedArrayHelper instance.\n */\n\n\nSPE.TypedArrayHelper.prototype.splice = function (start, end) {\n  'use strict';\n\n  start *= this.componentSize;\n  end *= this.componentSize;\n  var data = [],\n      array = this.array,\n      size = array.length;\n\n  for (var i = 0; i < size; ++i) {\n    if (i < start || i >= end) {\n      data.push(array[i]);\n    } // array[ i ] = 0;\n\n  }\n\n  this.setFromArray(0, data);\n  return this;\n};\n/**\n * Copies from the given TypedArray into this one, using the index argument\n * as the start position. Alias for `TypedArray.set`. Will automatically resize\n * if the given source array is of a larger size than the internal array.\n *\n * @param {Number} index      The start position from which to copy into this array.\n * @param {TypedArray} array The array from which to copy; the source array.\n * @return {SPE.TypedArrayHelper} Instance of this class.\n */\n\n\nSPE.TypedArrayHelper.prototype.setFromArray = function (index, array) {\n  'use strict';\n\n  var sourceArraySize = array.length,\n      newSize = index + sourceArraySize;\n\n  if (newSize > this.array.length) {\n    this.grow(newSize);\n  } else if (newSize < this.array.length) {\n    this.shrink(newSize);\n  }\n\n  this.array.set(array, this.indexOffset + index);\n  return this;\n};\n/**\n * Set a Vector2 value at `index`.\n *\n * @param {Number} index The index at which to set the vec2 values from.\n * @param {Vector2} vec2  Any object that has `x` and `y` properties.\n * @return {SPE.TypedArrayHelper} Instance of this class.\n */\n\n\nSPE.TypedArrayHelper.prototype.setVec2 = function (index, vec2) {\n  'use strict';\n\n  return this.setVec2Components(index, vec2.x, vec2.y);\n};\n/**\n * Set a Vector2 value using raw components.\n *\n * @param {Number} index The index at which to set the vec2 values from.\n * @param {Number} x     The Vec2's `x` component.\n * @param {Number} y     The Vec2's `y` component.\n * @return {SPE.TypedArrayHelper} Instance of this class.\n */\n\n\nSPE.TypedArrayHelper.prototype.setVec2Components = function (index, x, y) {\n  'use strict';\n\n  var array = this.array,\n      i = this.indexOffset + index * this.componentSize;\n  array[i] = x;\n  array[i + 1] = y;\n  return this;\n};\n/**\n * Set a Vector3 value at `index`.\n *\n * @param {Number} index The index at which to set the vec3 values from.\n * @param {Vector3} vec2  Any object that has `x`, `y`, and `z` properties.\n * @return {SPE.TypedArrayHelper} Instance of this class.\n */\n\n\nSPE.TypedArrayHelper.prototype.setVec3 = function (index, vec3) {\n  'use strict';\n\n  return this.setVec3Components(index, vec3.x, vec3.y, vec3.z);\n};\n/**\n * Set a Vector3 value using raw components.\n *\n * @param {Number} index The index at which to set the vec3 values from.\n * @param {Number} x     The Vec3's `x` component.\n * @param {Number} y     The Vec3's `y` component.\n * @param {Number} z     The Vec3's `z` component.\n * @return {SPE.TypedArrayHelper} Instance of this class.\n */\n\n\nSPE.TypedArrayHelper.prototype.setVec3Components = function (index, x, y, z) {\n  'use strict';\n\n  var array = this.array,\n      i = this.indexOffset + index * this.componentSize;\n  array[i] = x;\n  array[i + 1] = y;\n  array[i + 2] = z;\n  return this;\n};\n/**\n * Set a Vector4 value at `index`.\n *\n * @param {Number} index The index at which to set the vec4 values from.\n * @param {Vector4} vec2  Any object that has `x`, `y`, `z`, and `w` properties.\n * @return {SPE.TypedArrayHelper} Instance of this class.\n */\n\n\nSPE.TypedArrayHelper.prototype.setVec4 = function (index, vec4) {\n  'use strict';\n\n  return this.setVec4Components(index, vec4.x, vec4.y, vec4.z, vec4.w);\n};\n/**\n * Set a Vector4 value using raw components.\n *\n * @param {Number} index The index at which to set the vec4 values from.\n * @param {Number} x     The Vec4's `x` component.\n * @param {Number} y     The Vec4's `y` component.\n * @param {Number} z     The Vec4's `z` component.\n * @param {Number} w     The Vec4's `w` component.\n * @return {SPE.TypedArrayHelper} Instance of this class.\n */\n\n\nSPE.TypedArrayHelper.prototype.setVec4Components = function (index, x, y, z, w) {\n  'use strict';\n\n  var array = this.array,\n      i = this.indexOffset + index * this.componentSize;\n  array[i] = x;\n  array[i + 1] = y;\n  array[i + 2] = z;\n  array[i + 3] = w;\n  return this;\n};\n/**\n * Set a Matrix3 value at `index`.\n *\n * @param {Number} index The index at which to set the matrix values from.\n * @param {Matrix3} mat3 The 3x3 matrix to set from. Must have a TypedArray property named `elements` to copy from.\n * @return {SPE.TypedArrayHelper} Instance of this class.\n */\n\n\nSPE.TypedArrayHelper.prototype.setMat3 = function (index, mat3) {\n  'use strict';\n\n  return this.setFromArray(this.indexOffset + index * this.componentSize, mat3.elements);\n};\n/**\n * Set a Matrix4 value at `index`.\n *\n * @param {Number} index The index at which to set the matrix values from.\n * @param {Matrix4} mat3 The 4x4 matrix to set from. Must have a TypedArray property named `elements` to copy from.\n * @return {SPE.TypedArrayHelper} Instance of this class.\n */\n\n\nSPE.TypedArrayHelper.prototype.setMat4 = function (index, mat4) {\n  'use strict';\n\n  return this.setFromArray(this.indexOffset + index * this.componentSize, mat4.elements);\n};\n/**\n * Set a Color value at `index`.\n *\n * @param {Number} index The index at which to set the vec3 values from.\n * @param {Color} color  Any object that has `r`, `g`, and `b` properties.\n * @return {SPE.TypedArrayHelper} Instance of this class.\n */\n\n\nSPE.TypedArrayHelper.prototype.setColor = function (index, color) {\n  'use strict';\n\n  return this.setVec3Components(index, color.r, color.g, color.b);\n};\n/**\n * Set a Number value at `index`.\n *\n * @param {Number} index The index at which to set the vec3 values from.\n * @param {Number} numericValue  The number to assign to this index in the array.\n * @return {SPE.TypedArrayHelper} Instance of this class.\n */\n\n\nSPE.TypedArrayHelper.prototype.setNumber = function (index, numericValue) {\n  'use strict';\n\n  this.array[this.indexOffset + index * this.componentSize] = numericValue;\n  return this;\n};\n/**\n * Returns the value of the array at the given index, taking into account\n * the `indexOffset` property of this class.\n *\n * Note that this function ignores the component size and will just return a\n * single value.\n *\n * @param  {Number} index The index in the array to fetch.\n * @return {Number}       The value at the given index.\n */\n\n\nSPE.TypedArrayHelper.prototype.getValueAtIndex = function (index) {\n  'use strict';\n\n  return this.array[this.indexOffset + index];\n};\n/**\n * Returns the component value of the array at the given index, taking into account\n * the `indexOffset` property of this class.\n *\n * If the componentSize is set to 3, then it will return a new TypedArray\n * of length 3.\n *\n * @param  {Number} index The index in the array to fetch.\n * @return {TypedArray}       The component value at the given index.\n */\n\n\nSPE.TypedArrayHelper.prototype.getComponentValueAtIndex = function (index) {\n  'use strict';\n\n  return this.array.subarray(this.indexOffset + index * this.componentSize);\n};\n/**\n * A helper to handle creating and updating a THREE.BufferAttribute instance.\n *\n * @author  Luke Moody\n * @constructor\n * @param {String} type          The buffer attribute type. See SPE.ShaderAttribute.typeSizeMap for valid values.\n * @param {Boolean=} dynamicBuffer Whether this buffer attribute should be marked as dynamic or not.\n * @param {Function=} arrayType     A reference to a TypedArray constructor. Defaults to Float32Array if none provided.\n */\n\n\nSPE.ShaderAttribute = function (type, dynamicBuffer, arrayType) {\n  'use strict';\n\n  var typeMap = SPE.ShaderAttribute.typeSizeMap;\n  this.type = typeof type === 'string' && typeMap.hasOwnProperty(type) ? type : 'f';\n  this.componentSize = typeMap[this.type];\n  this.arrayType = arrayType || Float32Array;\n  this.typedArray = null;\n  this.bufferAttribute = null;\n  this.dynamicBuffer = !!dynamicBuffer;\n  this.updateMin = 0;\n  this.updateMax = 0;\n};\n\nSPE.ShaderAttribute.constructor = SPE.ShaderAttribute;\n/**\n * A map of uniform types to their component size.\n * @enum {Number}\n */\n\nSPE.ShaderAttribute.typeSizeMap = {\n  /**\n   * Float\n   * @type {Number}\n   */\n  f: 1,\n\n  /**\n   * Vec2\n   * @type {Number}\n   */\n  v2: 2,\n\n  /**\n   * Vec3\n   * @type {Number}\n   */\n  v3: 3,\n\n  /**\n   * Vec4\n   * @type {Number}\n   */\n  v4: 4,\n\n  /**\n   * Color\n   * @type {Number}\n   */\n  c: 3,\n\n  /**\n   * Mat3\n   * @type {Number}\n   */\n  m3: 9,\n\n  /**\n   * Mat4\n   * @type {Number}\n   */\n  m4: 16\n};\n/**\n * Calculate the minimum and maximum update range for this buffer attribute using\n * component size independant min and max values.\n *\n * @param {Number} min The start of the range to mark as needing an update.\n * @param {Number} max The end of the range to mark as needing an update.\n */\n\nSPE.ShaderAttribute.prototype.setUpdateRange = function (min, max) {\n  'use strict';\n\n  this.updateMin = Math.min(min * this.componentSize, this.updateMin * this.componentSize);\n  this.updateMax = Math.max(max * this.componentSize, this.updateMax * this.componentSize);\n};\n/**\n * Calculate the number of indices that this attribute should mark as needing\n * updating. Also marks the attribute as needing an update.\n */\n\n\nSPE.ShaderAttribute.prototype.flagUpdate = function () {\n  'use strict';\n\n  var attr = this.bufferAttribute,\n      range = attr.updateRange;\n  range.offset = this.updateMin;\n  range.count = Math.min(this.updateMax - this.updateMin + this.componentSize, this.typedArray.array.length); // console.log( range.offset, range.count, this.typedArray.array.length );\n  // console.log( 'flagUpdate:', range.offset, range.count );\n\n  attr.needsUpdate = true;\n};\n/**\n * Reset the index update counts for this attribute\n */\n\n\nSPE.ShaderAttribute.prototype.resetUpdateRange = function () {\n  'use strict';\n\n  this.updateMin = 0;\n  this.updateMax = 0;\n};\n\nSPE.ShaderAttribute.prototype.resetDynamic = function () {\n  'use strict';\n\n  this.bufferAttribute.dynamic = this.dynamicBuffer;\n};\n/**\n * Perform a splice operation on this attribute's buffer.\n * @param  {Number} start The start index of the splice. Will be multiplied by the number of components for this attribute.\n * @param  {Number} end The end index of the splice. Will be multiplied by the number of components for this attribute.\n */\n\n\nSPE.ShaderAttribute.prototype.splice = function (start, end) {\n  'use strict';\n\n  this.typedArray.splice(start, end); // Reset the reference to the attribute's typed array\n  // since it has probably changed.\n\n  this.forceUpdateAll();\n};\n\nSPE.ShaderAttribute.prototype.forceUpdateAll = function () {\n  'use strict';\n\n  this.bufferAttribute.array = this.typedArray.array;\n  this.bufferAttribute.updateRange.offset = 0;\n  this.bufferAttribute.updateRange.count = -1;\n  this.bufferAttribute.dynamic = false;\n  this.bufferAttribute.needsUpdate = true;\n};\n/**\n * Make sure this attribute has a typed array associated with it.\n *\n * If it does, then it will ensure the typed array is of the correct size.\n *\n * If not, a new SPE.TypedArrayHelper instance will be created.\n *\n * @param  {Number} size The size of the typed array to create or update to.\n */\n\n\nSPE.ShaderAttribute.prototype._ensureTypedArray = function (size) {\n  'use strict'; // Condition that's most likely to be true at the top: no change.\n\n  if (this.typedArray !== null && this.typedArray.size === size * this.componentSize) {\n    return;\n  } // Resize the array if we need to, telling the TypedArrayHelper to\n  // ignore it's component size when evaluating size.\n  else if (this.typedArray !== null && this.typedArray.size !== size) {\n      this.typedArray.setSize(size);\n    } // This condition should only occur once in an attribute's lifecycle.\n    else if (this.typedArray === null) {\n        this.typedArray = new SPE.TypedArrayHelper(this.arrayType, size, this.componentSize);\n      }\n};\n/**\n * Creates a THREE.BufferAttribute instance if one doesn't exist already.\n *\n * Ensures a typed array is present by calling _ensureTypedArray() first.\n *\n * If a buffer attribute exists already, then it will be marked as needing an update.\n *\n * @param  {Number} size The size of the typed array to create if one doesn't exist, or resize existing array to.\n */\n\n\nSPE.ShaderAttribute.prototype._createBufferAttribute = function (size) {\n  'use strict'; // Make sure the typedArray is present and correct.\n\n  this._ensureTypedArray(size); // Don't create it if it already exists, but do\n  // flag that it needs updating on the next render\n  // cycle.\n\n\n  if (this.bufferAttribute !== null) {\n    this.bufferAttribute.array = this.typedArray.array;\n    this.bufferAttribute.needsUpdate = true;\n    return;\n  }\n\n  this.bufferAttribute = new THREE.BufferAttribute(this.typedArray.array, this.componentSize);\n  this.bufferAttribute.dynamic = this.dynamicBuffer;\n};\n/**\n * Returns the length of the typed array associated with this attribute.\n * @return {Number} The length of the typed array. Will be 0 if no typed array has been created yet.\n */\n\n\nSPE.ShaderAttribute.prototype.getLength = function () {\n  'use strict';\n\n  if (this.typedArray === null) {\n    return 0;\n  }\n\n  return this.typedArray.array.length;\n};\n\nSPE.shaderChunks = {\n  // Register color-packing define statements.\n  defines: ['#define PACKED_COLOR_SIZE 256.0', '#define PACKED_COLOR_DIVISOR 255.0'].join('\\n'),\n  // All uniforms used by vertex / fragment shaders\n  uniforms: ['uniform float deltaTime;', 'uniform float runTime;', 'uniform sampler2D texture;', 'uniform vec4 textureAnimation;', 'uniform float scale;'].join('\\n'),\n  // All attributes used by the vertex shader.\n  //\n  // Note that some attributes are squashed into other ones:\n  //\n  // * Drag is acceleration.w\n  attributes: ['attribute vec4 acceleration;', 'attribute vec3 velocity;', 'attribute vec4 rotation;', 'attribute vec3 rotationCenter;', 'attribute vec4 params;', 'attribute vec4 size;', 'attribute vec4 angle;', 'attribute vec4 color;', 'attribute vec4 opacity;'].join('\\n'),\n  //\n  varyings: ['varying vec4 vColor;', '#ifdef SHOULD_ROTATE_TEXTURE', '    varying float vAngle;', '#endif', '#ifdef SHOULD_CALCULATE_SPRITE', '    varying vec4 vSpriteSheet;', '#endif'].join('\\n'),\n  // Branch-avoiding comparison fns\n  // - http://theorangeduck.com/page/avoiding-shader-conditionals\n  branchAvoidanceFunctions: ['float when_gt(float x, float y) {', '    return max(sign(x - y), 0.0);', '}', 'float when_lt(float x, float y) {', '    return min( max(1.0 - sign(x - y), 0.0), 1.0 );', '}', 'float when_eq( float x, float y ) {', '    return 1.0 - abs( sign( x - y ) );', '}', 'float when_ge(float x, float y) {', '  return 1.0 - when_lt(x, y);', '}', 'float when_le(float x, float y) {', '  return 1.0 - when_gt(x, y);', '}', // Branch-avoiding logical operators\n  // (to be used with above comparison fns)\n  'float and(float a, float b) {', '    return a * b;', '}', 'float or(float a, float b) {', '    return min(a + b, 1.0);', '}'].join('\\n'),\n  // From:\n  // - http://stackoverflow.com/a/12553149\n  // - https://stackoverflow.com/questions/22895237/hexadecimal-to-rgb-values-in-webgl-shader\n  unpackColor: ['vec3 unpackColor( in float hex ) {', '   vec3 c = vec3( 0.0 );', '   float r = mod( (hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );', '   float g = mod( (hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );', '   float b = mod( hex, PACKED_COLOR_SIZE );', '   c.r = r / PACKED_COLOR_DIVISOR;', '   c.g = g / PACKED_COLOR_DIVISOR;', '   c.b = b / PACKED_COLOR_DIVISOR;', '   return c;', '}'].join('\\n'),\n  unpackRotationAxis: ['vec3 unpackRotationAxis( in float hex ) {', '   vec3 c = vec3( 0.0 );', '   float r = mod( (hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );', '   float g = mod( (hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );', '   float b = mod( hex, PACKED_COLOR_SIZE );', '   c.r = r / PACKED_COLOR_DIVISOR;', '   c.g = g / PACKED_COLOR_DIVISOR;', '   c.b = b / PACKED_COLOR_DIVISOR;', '   c *= vec3( 2.0 );', '   c -= vec3( 1.0 );', '   return c;', '}'].join('\\n'),\n  floatOverLifetime: ['float getFloatOverLifetime( in float positionInTime, in vec4 attr ) {', '    highp float value = 0.0;', '    float deltaAge = positionInTime * float( VALUE_OVER_LIFETIME_LENGTH - 1 );', '    float fIndex = 0.0;', '    float shouldApplyValue = 0.0;', // This might look a little odd, but it's faster in the testing I've done than using branches.\n  // Uses basic maths to avoid branching.\n  //\n  // Take a look at the branch-avoidance functions defined above,\n  // and be sure to check out The Orange Duck site where I got this\n  // from (link above).\n  // Fix for static emitters (age is always zero).\n  '    value += attr[ 0 ] * when_eq( deltaAge, 0.0 );', '', '    for( int i = 0; i < VALUE_OVER_LIFETIME_LENGTH - 1; ++i ) {', '       fIndex = float( i );', '       shouldApplyValue = and( when_gt( deltaAge, fIndex ), when_le( deltaAge, fIndex + 1.0 ) );', '       value += shouldApplyValue * mix( attr[ i ], attr[ i + 1 ], deltaAge - fIndex );', '    }', '', '    return value;', '}'].join('\\n'),\n  colorOverLifetime: ['vec3 getColorOverLifetime( in float positionInTime, in vec3 color1, in vec3 color2, in vec3 color3, in vec3 color4 ) {', '    vec3 value = vec3( 0.0 );', '    value.x = getFloatOverLifetime( positionInTime, vec4( color1.x, color2.x, color3.x, color4.x ) );', '    value.y = getFloatOverLifetime( positionInTime, vec4( color1.y, color2.y, color3.y, color4.y ) );', '    value.z = getFloatOverLifetime( positionInTime, vec4( color1.z, color2.z, color3.z, color4.z ) );', '    return value;', '}'].join('\\n'),\n  paramFetchingFunctions: ['float getAlive() {', '   return params.x;', '}', 'float getAge() {', '   return params.y;', '}', 'float getMaxAge() {', '   return params.z;', '}', 'float getWiggle() {', '   return params.w;', '}'].join('\\n'),\n  forceFetchingFunctions: ['vec4 getPosition( in float age ) {', '   return modelViewMatrix * vec4( position, 1.0 );', '}', 'vec3 getVelocity( in float age ) {', '   return velocity * age;', '}', 'vec3 getAcceleration( in float age ) {', '   return acceleration.xyz * age;', '}'].join('\\n'),\n  rotationFunctions: [// Huge thanks to:\n  // - http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\n  '#ifdef SHOULD_ROTATE_PARTICLES', '   mat4 getRotationMatrix( in vec3 axis, in float angle) {', '       axis = normalize(axis);', '       float s = sin(angle);', '       float c = cos(angle);', '       float oc = 1.0 - c;', '', '       return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,', '                   oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,', '                   oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,', '                   0.0,                                0.0,                                0.0,                                1.0);', '   }', '', '   vec3 getRotation( in vec3 pos, in float positionInTime ) {', '      if( rotation.y == 0.0 ) {', '           return pos;', '      }', '', '      vec3 axis = unpackRotationAxis( rotation.x );', '      vec3 center = rotationCenter;', '      vec3 translated;', '      mat4 rotationMatrix;', '      float angle = 0.0;', '      angle += when_eq( rotation.z, 0.0 ) * rotation.y;', '      angle += when_gt( rotation.z, 0.0 ) * mix( 0.0, rotation.y, positionInTime );', '      translated = rotationCenter - pos;', '      rotationMatrix = getRotationMatrix( axis, angle );', '      return center - vec3( rotationMatrix * vec4( translated, 0.0 ) );', '   }', '#endif'].join('\\n'),\n  // Fragment chunks\n  rotateTexture: ['    vec2 vUv = vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y );', '', '    #ifdef SHOULD_ROTATE_TEXTURE', '       float x = gl_PointCoord.x - 0.5;', '       float y = 1.0 - gl_PointCoord.y - 0.5;', '       float c = cos( -vAngle );', '       float s = sin( -vAngle );', '       vUv = vec2( c * x + s * y + 0.5, c * y - s * x + 0.5 );', '    #endif', '', // Spritesheets overwrite angle calculations.\n  '    #ifdef SHOULD_CALCULATE_SPRITE', '        float framesX = vSpriteSheet.x;', '        float framesY = vSpriteSheet.y;', '        float columnNorm = vSpriteSheet.z;', '        float rowNorm = vSpriteSheet.w;', '        vUv.x = gl_PointCoord.x * framesX + columnNorm;', '        vUv.y = 1.0 - (gl_PointCoord.y * framesY + rowNorm);', '    #endif', '', '    vec4 rotatedTexture = texture2D( texture, vUv );'].join('\\n')\n};\nSPE.shaders = {\n  vertex: [SPE.shaderChunks.defines, SPE.shaderChunks.uniforms, SPE.shaderChunks.attributes, SPE.shaderChunks.varyings, THREE.ShaderChunk.common, THREE.ShaderChunk.logdepthbuf_pars_vertex, THREE.ShaderChunk.fog_pars_vertex, SPE.shaderChunks.branchAvoidanceFunctions, SPE.shaderChunks.unpackColor, SPE.shaderChunks.unpackRotationAxis, SPE.shaderChunks.floatOverLifetime, SPE.shaderChunks.colorOverLifetime, SPE.shaderChunks.paramFetchingFunctions, SPE.shaderChunks.forceFetchingFunctions, SPE.shaderChunks.rotationFunctions, 'vec4 mvPosition;', 'void main() {', //\n  // Setup...\n  //\n  '    highp float age = getAge();', '    highp float alive = getAlive();', '    highp float maxAge = getMaxAge();', '    highp float positionInTime = (age / maxAge);', '    highp float isAlive = when_gt( alive, 0.0 );', '    #ifdef SHOULD_WIGGLE_PARTICLES', '        float wiggleAmount = positionInTime * getWiggle();', '        float wiggleSin = isAlive * sin( wiggleAmount );', '        float wiggleCos = isAlive * cos( wiggleAmount );', '    #endif', //\n  // Forces\n  //\n  // Get forces & position\n  '    vec3 vel = getVelocity( age );', '    vec3 accel = getAcceleration( age );', '    vec3 force = vec3( 0.0 );', '    vec3 pos = vec3( position );', // Calculate the required drag to apply to the forces.\n  '    float drag = 1.0 - (positionInTime * 0.5) * acceleration.w;', // Integrate forces...\n  '    force += vel;', '    force *= drag;', '    force += accel * age;', '    pos += force;', // Wiggly wiggly wiggle!\n  '    #ifdef SHOULD_WIGGLE_PARTICLES', '        pos.x += wiggleSin;', '        pos.y += wiggleCos;', '        pos.z += wiggleSin;', '    #endif', // Rotate the emitter around it's central point\n  '    #ifdef SHOULD_ROTATE_PARTICLES', '        pos = getRotation( pos, positionInTime );', '    #endif', // Convert pos to a world-space value\n  '    vec4 mvPos = mvPosition = modelViewMatrix * vec4( pos, 1.0 );', // Determine point size.\n  '    highp float pointSize = getFloatOverLifetime( positionInTime, size ) * isAlive;', // Determine perspective\n  '    #ifdef HAS_PERSPECTIVE', '        float perspective = scale / length( mvPos.xyz );', '    #else', '        float perspective = 1.0;', '    #endif', // Apply perpective to pointSize value\n  '    float pointSizePerspective = pointSize * perspective;', //\n  // Appearance\n  //\n  // Determine color and opacity for this particle\n  '    #ifdef COLORIZE', '       vec3 c = isAlive * getColorOverLifetime(', '           positionInTime,', '           unpackColor( color.x ),', '           unpackColor( color.y ),', '           unpackColor( color.z ),', '           unpackColor( color.w )', '       );', '    #else', '       vec3 c = vec3(1.0);', '    #endif', '    float o = isAlive * getFloatOverLifetime( positionInTime, opacity );', // Assign color to vColor varying.\n  '    vColor = vec4( c, o );', // Determine angle\n  '    #ifdef SHOULD_ROTATE_TEXTURE', '        vAngle = isAlive * getFloatOverLifetime( positionInTime, angle );', '    #endif', // If this particle is using a sprite-sheet as a texture, we'll have to figure out\n  // what frame of the texture the particle is using at it's current position in time.\n  '    #ifdef SHOULD_CALCULATE_SPRITE', '        float framesX = textureAnimation.x;', '        float framesY = textureAnimation.y;', '        float loopCount = textureAnimation.w;', '        float totalFrames = textureAnimation.z;', '        float frameNumber = mod( (positionInTime * loopCount) * totalFrames, totalFrames );', '        float column = floor(mod( frameNumber, framesX ));', '        float row = floor( (frameNumber - column) / framesX );', '        float columnNorm = column / framesX;', '        float rowNorm = row / framesY;', '        vSpriteSheet.x = 1.0 / framesX;', '        vSpriteSheet.y = 1.0 / framesY;', '        vSpriteSheet.z = columnNorm;', '        vSpriteSheet.w = rowNorm;', '    #endif', //\n  // Write values\n  //\n  // Set PointSize according to size at current point in time.\n  '    gl_PointSize = pointSizePerspective;', '    gl_Position = projectionMatrix * mvPos;', THREE.ShaderChunk.logdepthbuf_vertex, THREE.ShaderChunk.fog_vertex, '}'].join('\\n'),\n  fragment: [SPE.shaderChunks.uniforms, THREE.ShaderChunk.common, THREE.ShaderChunk.fog_pars_fragment, THREE.ShaderChunk.logdepthbuf_pars_fragment, SPE.shaderChunks.varyings, SPE.shaderChunks.branchAvoidanceFunctions, 'void main() {', '    vec3 outgoingLight = vColor.xyz;', '    ', '    #ifdef ALPHATEST', '       if ( vColor.w < float(ALPHATEST) ) discard;', '    #endif', SPE.shaderChunks.rotateTexture, THREE.ShaderChunk.logdepthbuf_fragment, '    outgoingLight = vColor.xyz * rotatedTexture.xyz;', '    gl_FragColor = vec4( outgoingLight.xyz, rotatedTexture.w * vColor.w );', THREE.ShaderChunk.fog_fragment, '}'].join('\\n')\n};\n/**\n * A bunch of utility functions used throughout the library.\n * @namespace\n * @type {Object}\n */\n\nSPE.utils = {\n  /**\n   * A map of types used by `SPE.utils.ensureTypedArg` and\n   * `SPE.utils.ensureArrayTypedArg` to compare types against.\n   *\n   * @enum {String}\n   */\n  types: {\n    /**\n     * Boolean type.\n     * @type {String}\n     */\n    BOOLEAN: 'boolean',\n\n    /**\n     * String type.\n     * @type {String}\n     */\n    STRING: 'string',\n\n    /**\n     * Number type.\n     * @type {String}\n     */\n    NUMBER: 'number',\n\n    /**\n     * Object type.\n     * @type {String}\n     */\n    OBJECT: 'object'\n  },\n\n  /**\n   * Given a value, a type, and a default value to fallback to,\n   * ensure the given argument adheres to the type requesting,\n   * returning the default value if type check is false.\n   *\n   * @param  {(boolean|string|number|object)} arg          The value to perform a type-check on.\n   * @param  {String} type         The type the `arg` argument should adhere to.\n   * @param  {(boolean|string|number|object)} defaultValue A default value to fallback on if the type check fails.\n   * @return {(boolean|string|number|object)}              The given value if type check passes, or the default value if it fails.\n   */\n  ensureTypedArg: function ensureTypedArg(arg, type, defaultValue) {\n    'use strict';\n\n    if (typeof arg === type) {\n      return arg;\n    } else {\n      return defaultValue;\n    }\n  },\n\n  /**\n   * Given an array of values, a type, and a default value,\n   * ensure the given array's contents ALL adhere to the provided type,\n   * returning the default value if type check fails.\n   *\n   * If the given value to check isn't an Array, delegates to SPE.utils.ensureTypedArg.\n   *\n   * @param  {Array|boolean|string|number|object} arg          The array of values to check type of.\n   * @param  {String} type         The type that should be adhered to.\n   * @param  {(boolean|string|number|object)} defaultValue A default fallback value.\n   * @return {(boolean|string|number|object)}              The given value if type check passes, or the default value if it fails.\n   */\n  ensureArrayTypedArg: function ensureArrayTypedArg(arg, type, defaultValue) {\n    'use strict'; // If the argument being checked is an array, loop through\n    // it and ensure all the values are of the correct type,\n    // falling back to the defaultValue if any aren't.\n\n    if (Array.isArray(arg)) {\n      for (var i = arg.length - 1; i >= 0; --i) {\n        if (typeof arg[i] !== type) {\n          return defaultValue;\n        }\n      }\n\n      return arg;\n    } // If the arg isn't an array then just fallback to\n    // checking the type.\n\n\n    return this.ensureTypedArg(arg, type, defaultValue);\n  },\n\n  /**\n   * Ensures the given value is an instance of a constructor function.\n   *\n   * @param  {Object} arg          The value to check instance of.\n   * @param  {Function} instance     The constructor of the instance to check against.\n   * @param  {Object} defaultValue A default fallback value if instance check fails\n   * @return {Object}              The given value if type check passes, or the default value if it fails.\n   */\n  ensureInstanceOf: function ensureInstanceOf(arg, instance, defaultValue) {\n    'use strict';\n\n    if (instance !== undefined && arg instanceof instance) {\n      return arg;\n    } else {\n      return defaultValue;\n    }\n  },\n\n  /**\n   * Given an array of values, ensure the instances of all items in the array\n   * matches the given instance constructor falling back to a default value if\n   * the check fails.\n   *\n   * If given value isn't an Array, delegates to `SPE.utils.ensureInstanceOf`.\n   *\n   * @param  {Array|Object} arg          The value to perform the instanceof check on.\n   * @param  {Function} instance     The constructor of the instance to check against.\n   * @param  {Object} defaultValue A default fallback value if instance check fails\n   * @return {Object}              The given value if type check passes, or the default value if it fails.\n   */\n  ensureArrayInstanceOf: function ensureArrayInstanceOf(arg, instance, defaultValue) {\n    'use strict'; // If the argument being checked is an array, loop through\n    // it and ensure all the values are of the correct type,\n    // falling back to the defaultValue if any aren't.\n\n    if (Array.isArray(arg)) {\n      for (var i = arg.length - 1; i >= 0; --i) {\n        if (instance !== undefined && arg[i] instanceof instance === false) {\n          return defaultValue;\n        }\n      }\n\n      return arg;\n    } // If the arg isn't an array then just fallback to\n    // checking the type.\n\n\n    return this.ensureInstanceOf(arg, instance, defaultValue);\n  },\n\n  /**\n   * Ensures that any \"value-over-lifetime\" properties of an emitter are\n   * of the correct length (as dictated by `SPE.valueOverLifetimeLength`).\n   *\n   * Delegates to `SPE.utils.interpolateArray` for array resizing.\n   *\n   * If properties aren't arrays, then property values are put into one.\n   *\n   * @param  {Object} property  The property of an SPE.Emitter instance to check compliance of.\n   * @param  {Number} minLength The minimum length of the array to create.\n   * @param  {Number} maxLength The maximum length of the array to create.\n   */\n  ensureValueOverLifetimeCompliance: function ensureValueOverLifetimeCompliance(property, minLength, maxLength) {\n    'use strict';\n\n    minLength = minLength || 3;\n    maxLength = maxLength || 3; // First, ensure both properties are arrays.\n\n    if (Array.isArray(property._value) === false) {\n      property._value = [property._value];\n    }\n\n    if (Array.isArray(property._spread) === false) {\n      property._spread = [property._spread];\n    }\n\n    var valueLength = this.clamp(property._value.length, minLength, maxLength),\n        spreadLength = this.clamp(property._spread.length, minLength, maxLength),\n        desiredLength = Math.max(valueLength, spreadLength);\n\n    if (property._value.length !== desiredLength) {\n      property._value = this.interpolateArray(property._value, desiredLength);\n    }\n\n    if (property._spread.length !== desiredLength) {\n      property._spread = this.interpolateArray(property._spread, desiredLength);\n    }\n  },\n\n  /**\n   * Performs linear interpolation (lerp) on an array.\n   *\n   * For example, lerping [1, 10], with a `newLength` of 10 will produce [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].\n   *\n   * Delegates to `SPE.utils.lerpTypeAgnostic` to perform the actual\n   * interpolation.\n   *\n   * @param  {Array} srcArray  The array to lerp.\n   * @param  {Number} newLength The length the array should be interpolated to.\n   * @return {Array}           The interpolated array.\n   */\n  interpolateArray: function interpolateArray(srcArray, newLength) {\n    'use strict';\n\n    var sourceLength = srcArray.length,\n        newArray = [typeof srcArray[0].clone === 'function' ? srcArray[0].clone() : srcArray[0]],\n        factor = (sourceLength - 1) / (newLength - 1);\n\n    for (var i = 1; i < newLength - 1; ++i) {\n      var f = i * factor,\n          before = Math.floor(f),\n          after = Math.ceil(f),\n          delta = f - before;\n      newArray[i] = this.lerpTypeAgnostic(srcArray[before], srcArray[after], delta);\n    }\n\n    newArray.push(typeof srcArray[sourceLength - 1].clone === 'function' ? srcArray[sourceLength - 1].clone() : srcArray[sourceLength - 1]);\n    return newArray;\n  },\n\n  /**\n   * Clamp a number to between the given min and max values.\n   * @param  {Number} value The number to clamp.\n   * @param  {Number} min   The minimum value.\n   * @param  {Number} max   The maximum value.\n   * @return {Number}       The clamped number.\n   */\n  clamp: function clamp(value, min, max) {\n    'use strict';\n\n    return Math.max(min, Math.min(value, max));\n  },\n\n  /**\n   * If the given value is less than the epsilon value, then return\n   * a randomised epsilon value if specified, or just the epsilon value if not.\n   * Works for negative numbers as well as positive.\n   *\n   * @param  {Number} value     The value to perform the operation on.\n   * @param  {Boolean} randomise Whether the value should be randomised.\n   * @return {Number}           The result of the operation.\n   */\n  zeroToEpsilon: function zeroToEpsilon(value, randomise) {\n    'use strict';\n\n    var epsilon = 0.00001,\n        result = value;\n    result = randomise ? Math.random() * epsilon * 10 : epsilon;\n\n    if (value < 0 && value > -epsilon) {\n      result = -result;\n    } // if ( value === 0 ) {\n    //     result = randomise ? Math.random() * epsilon * 10 : epsilon;\n    // }\n    // else if ( value > 0 && value < epsilon ) {\n    //     result = randomise ? Math.random() * epsilon * 10 : epsilon;\n    // }\n    // else if ( value < 0 && value > -epsilon ) {\n    //     result = -( randomise ? Math.random() * epsilon * 10 : epsilon );\n    // }\n\n\n    return result;\n  },\n\n  /**\n   * Linearly interpolates two values of various types. The given values\n   * must be of the same type for the interpolation to work.\n   * @param  {(number|Object)} start The start value of the lerp.\n   * @param  {(number|object)} end   The end value of the lerp.\n   * @param  {Number} delta The delta posiiton of the lerp operation. Ideally between 0 and 1 (inclusive).\n   * @return {(number|object|undefined)}       The result of the operation. Result will be undefined if\n   *                                               the start and end arguments aren't a supported type, or\n   *                                               if their types do not match.\n   */\n  lerpTypeAgnostic: function lerpTypeAgnostic(start, end, delta) {\n    'use strict';\n\n    var types = this.types,\n        out;\n\n    if (typeof start === types.NUMBER && typeof end === types.NUMBER) {\n      return start + (end - start) * delta;\n    } else if (start instanceof THREE.Vector2 && end instanceof THREE.Vector2) {\n      out = start.clone();\n      out.x = this.lerp(start.x, end.x, delta);\n      out.y = this.lerp(start.y, end.y, delta);\n      return out;\n    } else if (start instanceof THREE.Vector3 && end instanceof THREE.Vector3) {\n      out = start.clone();\n      out.x = this.lerp(start.x, end.x, delta);\n      out.y = this.lerp(start.y, end.y, delta);\n      out.z = this.lerp(start.z, end.z, delta);\n      return out;\n    } else if (start instanceof THREE.Vector4 && end instanceof THREE.Vector4) {\n      out = start.clone();\n      out.x = this.lerp(start.x, end.x, delta);\n      out.y = this.lerp(start.y, end.y, delta);\n      out.z = this.lerp(start.z, end.z, delta);\n      out.w = this.lerp(start.w, end.w, delta);\n      return out;\n    } else if (start instanceof THREE.Color && end instanceof THREE.Color) {\n      out = start.clone();\n      out.r = this.lerp(start.r, end.r, delta);\n      out.g = this.lerp(start.g, end.g, delta);\n      out.b = this.lerp(start.b, end.b, delta);\n      return out;\n    } else {\n      console.warn('Invalid argument types, or argument types do not match:', start, end);\n    }\n  },\n\n  /**\n   * Perform a linear interpolation operation on two numbers.\n   * @param  {Number} start The start value.\n   * @param  {Number} end   The end value.\n   * @param  {Number} delta The position to interpolate to.\n   * @return {Number}       The result of the lerp operation.\n   */\n  lerp: function lerp(start, end, delta) {\n    'use strict';\n\n    return start + (end - start) * delta;\n  },\n\n  /**\n   * Rounds a number to a nearest multiple.\n   *\n   * @param  {Number} n        The number to round.\n   * @param  {Number} multiple The multiple to round to.\n   * @return {Number}          The result of the round operation.\n   */\n  roundToNearestMultiple: function roundToNearestMultiple(n, multiple) {\n    'use strict';\n\n    var remainder = 0;\n\n    if (multiple === 0) {\n      return n;\n    }\n\n    remainder = Math.abs(n) % multiple;\n\n    if (remainder === 0) {\n      return n;\n    }\n\n    if (n < 0) {\n      return -(Math.abs(n) - remainder);\n    }\n\n    return n + multiple - remainder;\n  },\n\n  /**\n   * Check if all items in an array are equal. Uses strict equality.\n   *\n   * @param  {Array} array The array of values to check equality of.\n   * @return {Boolean}       Whether the array's values are all equal or not.\n   */\n  arrayValuesAreEqual: function arrayValuesAreEqual(array) {\n    'use strict';\n\n    for (var i = 0; i < array.length - 1; ++i) {\n      if (array[i] !== array[i + 1]) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  // colorsAreEqual: function() {\n  //     var colors = Array.prototype.slice.call( arguments ),\n  //         numColors = colors.length;\n  //     for ( var i = 0, color1, color2; i < numColors - 1; ++i ) {\n  //         color1 = colors[ i ];\n  //         color2 = colors[ i + 1 ];\n  //         if (\n  //             color1.r !== color2.r ||\n  //             color1.g !== color2.g ||\n  //             color1.b !== color2.b\n  //         ) {\n  //             return false\n  //         }\n  //     }\n  //     return true;\n  // },\n\n  /**\n   * Given a start value and a spread value, create and return a random\n   * number.\n   * @param  {Number} base   The start value.\n   * @param  {Number} spread The size of the random variance to apply.\n   * @return {Number}        A randomised number.\n   */\n  randomFloat: function randomFloat(base, spread) {\n    'use strict';\n\n    return base + spread * (Math.random() - 0.5);\n  },\n\n  /**\n   * Given an SPE.ShaderAttribute instance, and various other settings,\n   * assign values to the attribute's array in a `vec3` format.\n   *\n   * @param  {Object} attribute   The instance of SPE.ShaderAttribute to save the result to.\n   * @param  {Number} index       The offset in the attribute's TypedArray to save the result from.\n   * @param  {Object} base        THREE.Vector3 instance describing the start value.\n   * @param  {Object} spread      THREE.Vector3 instance describing the random variance to apply to the start value.\n   * @param  {Object} spreadClamp THREE.Vector3 instance describing the multiples to clamp the randomness to.\n   */\n  randomVector3: function randomVector3(attribute, index, base, spread, spreadClamp) {\n    'use strict';\n\n    var x = base.x + (Math.random() * spread.x - spread.x * 0.5),\n        y = base.y + (Math.random() * spread.y - spread.y * 0.5),\n        z = base.z + (Math.random() * spread.z - spread.z * 0.5); // var x = this.randomFloat( base.x, spread.x ),\n    // y = this.randomFloat( base.y, spread.y ),\n    // z = this.randomFloat( base.z, spread.z );\n\n    if (spreadClamp) {\n      x = -spreadClamp.x * 0.5 + this.roundToNearestMultiple(x, spreadClamp.x);\n      y = -spreadClamp.y * 0.5 + this.roundToNearestMultiple(y, spreadClamp.y);\n      z = -spreadClamp.z * 0.5 + this.roundToNearestMultiple(z, spreadClamp.z);\n    }\n\n    attribute.typedArray.setVec3Components(index, x, y, z);\n  },\n\n  /**\n   * Given an SPE.Shader attribute instance, and various other settings,\n   * assign Color values to the attribute.\n   * @param  {Object} attribute The instance of SPE.ShaderAttribute to save the result to.\n   * @param  {Number} index     The offset in the attribute's TypedArray to save the result from.\n   * @param  {Object} base      THREE.Color instance describing the start color.\n   * @param  {Object} spread    THREE.Vector3 instance describing the random variance to apply to the start color.\n   */\n  randomColor: function randomColor(attribute, index, base, spread) {\n    'use strict';\n\n    var r = base.r + Math.random() * spread.x,\n        g = base.g + Math.random() * spread.y,\n        b = base.b + Math.random() * spread.z;\n    r = this.clamp(r, 0, 1);\n    g = this.clamp(g, 0, 1);\n    b = this.clamp(b, 0, 1);\n    attribute.typedArray.setVec3Components(index, r, g, b);\n  },\n  randomColorAsHex: function () {\n    'use strict';\n\n    var workingColor = new THREE.Color();\n    /**\n     * Assigns a random color value, encoded as a hex value in decimal\n     * format, to a SPE.ShaderAttribute instance.\n     * @param  {Object} attribute The instance of SPE.ShaderAttribute to save the result to.\n     * @param  {Number} index     The offset in the attribute's TypedArray to save the result from.\n     * @param  {Object} base      THREE.Color instance describing the start color.\n     * @param  {Object} spread    THREE.Vector3 instance describing the random variance to apply to the start color.\n     */\n\n    return function (attribute, index, base, spread) {\n      var numItems = base.length,\n          colors = [];\n\n      for (var i = 0; i < numItems; ++i) {\n        var spreadVector = spread[i];\n        workingColor.copy(base[i]);\n        workingColor.r += Math.random() * spreadVector.x - spreadVector.x * 0.5;\n        workingColor.g += Math.random() * spreadVector.y - spreadVector.y * 0.5;\n        workingColor.b += Math.random() * spreadVector.z - spreadVector.z * 0.5;\n        workingColor.r = this.clamp(workingColor.r, 0, 1);\n        workingColor.g = this.clamp(workingColor.g, 0, 1);\n        workingColor.b = this.clamp(workingColor.b, 0, 1);\n        colors.push(workingColor.getHex());\n      }\n\n      attribute.typedArray.setVec4Components(index, colors[0], colors[1], colors[2], colors[3]);\n    };\n  }(),\n\n  /**\n   * Assigns a random vector 3 value to an SPE.ShaderAttribute instance, projecting the\n   * given values onto a sphere.\n   *\n   * @param  {Object} attribute The instance of SPE.ShaderAttribute to save the result to.\n   * @param  {Number} index     The offset in the attribute's TypedArray to save the result from.\n   * @param  {Object} base              THREE.Vector3 instance describing the origin of the transform.\n   * @param  {Number} radius            The radius of the sphere to project onto.\n   * @param  {Number} radiusSpread      The amount of randomness to apply to the projection result\n   * @param  {Object} radiusScale       THREE.Vector3 instance describing the scale of each axis of the sphere.\n   * @param  {Number} radiusSpreadClamp What numeric multiple the projected value should be clamped to.\n   */\n  randomVector3OnSphere: function randomVector3OnSphere(attribute, index, base, radius, radiusSpread, radiusScale, radiusSpreadClamp, distributionClamp) {\n    'use strict';\n\n    var depth = 2 * Math.random() - 1,\n        t = 6.2832 * Math.random(),\n        r = Math.sqrt(1 - depth * depth),\n        rand = this.randomFloat(radius, radiusSpread),\n        x = 0,\n        y = 0,\n        z = 0;\n\n    if (radiusSpreadClamp) {\n      rand = Math.round(rand / radiusSpreadClamp) * radiusSpreadClamp;\n    } // Set position on sphere\n\n\n    x = r * Math.cos(t) * rand;\n    y = r * Math.sin(t) * rand;\n    z = depth * rand; // Apply radius scale to this position\n\n    x *= radiusScale.x;\n    y *= radiusScale.y;\n    z *= radiusScale.z; // Translate to the base position.\n\n    x += base.x;\n    y += base.y;\n    z += base.z; // Set the values in the typed array.\n\n    attribute.typedArray.setVec3Components(index, x, y, z);\n  },\n  seededRandom: function seededRandom(seed) {\n    var x = Math.sin(seed) * 10000;\n    return x - (x | 0);\n  },\n\n  /**\n   * Assigns a random vector 3 value to an SPE.ShaderAttribute instance, projecting the\n   * given values onto a 2d-disc.\n   *\n   * @param  {Object} attribute The instance of SPE.ShaderAttribute to save the result to.\n   * @param  {Number} index     The offset in the attribute's TypedArray to save the result from.\n   * @param  {Object} base              THREE.Vector3 instance describing the origin of the transform.\n   * @param  {Number} radius            The radius of the sphere to project onto.\n   * @param  {Number} radiusSpread      The amount of randomness to apply to the projection result\n   * @param  {Object} radiusScale       THREE.Vector3 instance describing the scale of each axis of the disc. The z-component is ignored.\n   * @param  {Number} radiusSpreadClamp What numeric multiple the projected value should be clamped to.\n   */\n  randomVector3OnDisc: function randomVector3OnDisc(attribute, index, base, radius, radiusSpread, radiusScale, radiusSpreadClamp) {\n    'use strict';\n\n    var t = 6.2832 * Math.random(),\n        rand = Math.abs(this.randomFloat(radius, radiusSpread)),\n        x = 0,\n        y = 0,\n        z = 0;\n\n    if (radiusSpreadClamp) {\n      rand = Math.round(rand / radiusSpreadClamp) * radiusSpreadClamp;\n    } // Set position on sphere\n\n\n    x = Math.cos(t) * rand;\n    y = Math.sin(t) * rand; // Apply radius scale to this position\n\n    x *= radiusScale.x;\n    y *= radiusScale.y; // Translate to the base position.\n\n    x += base.x;\n    y += base.y;\n    z += base.z; // Set the values in the typed array.\n\n    attribute.typedArray.setVec3Components(index, x, y, z);\n  },\n  randomDirectionVector3OnSphere: function () {\n    'use strict';\n\n    var v = new THREE.Vector3();\n    /**\n     * Given an SPE.ShaderAttribute instance, create a direction vector from the given\n     * position, using `speed` as the magnitude. Values are saved to the attribute.\n     *\n     * @param  {Object} attribute       The instance of SPE.ShaderAttribute to save the result to.\n     * @param  {Number} index           The offset in the attribute's TypedArray to save the result from.\n     * @param  {Number} posX            The particle's x coordinate.\n     * @param  {Number} posY            The particle's y coordinate.\n     * @param  {Number} posZ            The particle's z coordinate.\n     * @param  {Object} emitterPosition THREE.Vector3 instance describing the emitter's base position.\n     * @param  {Number} speed           The magnitude to apply to the vector.\n     * @param  {Number} speedSpread     The amount of randomness to apply to the magnitude.\n     */\n\n    return function (attribute, index, posX, posY, posZ, emitterPosition, speed, speedSpread) {\n      v.copy(emitterPosition);\n      v.x -= posX;\n      v.y -= posY;\n      v.z -= posZ;\n      v.normalize().multiplyScalar(-this.randomFloat(speed, speedSpread));\n      attribute.typedArray.setVec3Components(index, v.x, v.y, v.z);\n    };\n  }(),\n  randomDirectionVector3OnDisc: function () {\n    'use strict';\n\n    var v = new THREE.Vector3();\n    /**\n     * Given an SPE.ShaderAttribute instance, create a direction vector from the given\n     * position, using `speed` as the magnitude. Values are saved to the attribute.\n     *\n     * @param  {Object} attribute       The instance of SPE.ShaderAttribute to save the result to.\n     * @param  {Number} index           The offset in the attribute's TypedArray to save the result from.\n     * @param  {Number} posX            The particle's x coordinate.\n     * @param  {Number} posY            The particle's y coordinate.\n     * @param  {Number} posZ            The particle's z coordinate.\n     * @param  {Object} emitterPosition THREE.Vector3 instance describing the emitter's base position.\n     * @param  {Number} speed           The magnitude to apply to the vector.\n     * @param  {Number} speedSpread     The amount of randomness to apply to the magnitude.\n     */\n\n    return function (attribute, index, posX, posY, posZ, emitterPosition, speed, speedSpread) {\n      v.copy(emitterPosition);\n      v.x -= posX;\n      v.y -= posY;\n      v.z -= posZ;\n      v.normalize().multiplyScalar(-this.randomFloat(speed, speedSpread));\n      attribute.typedArray.setVec3Components(index, v.x, v.y, 0);\n    };\n  }(),\n  getPackedRotationAxis: function () {\n    'use strict';\n\n    var v = new THREE.Vector3(),\n        vSpread = new THREE.Vector3(),\n        c = new THREE.Color(),\n        addOne = new THREE.Vector3(1, 1, 1);\n    /**\n     * Given a rotation axis, and a rotation axis spread vector,\n     * calculate a randomised rotation axis, and pack it into\n     * a hexadecimal value represented in decimal form.\n     * @param  {Object} axis       THREE.Vector3 instance describing the rotation axis.\n     * @param  {Object} axisSpread THREE.Vector3 instance describing the amount of randomness to apply to the rotation axis.\n     * @return {Number}            The packed rotation axis, with randomness.\n     */\n\n    return function (axis, axisSpread) {\n      v.copy(axis).normalize();\n      vSpread.copy(axisSpread).normalize();\n      v.x += -axisSpread.x * 0.5 + Math.random() * axisSpread.x;\n      v.y += -axisSpread.y * 0.5 + Math.random() * axisSpread.y;\n      v.z += -axisSpread.z * 0.5 + Math.random() * axisSpread.z; // v.x = Math.abs( v.x );\n      // v.y = Math.abs( v.y );\n      // v.z = Math.abs( v.z );\n\n      v.normalize().add(addOne).multiplyScalar(0.5);\n      c.setRGB(v.x, v.y, v.z);\n      return c.getHex();\n    };\n  }()\n};\n/**\n * An SPE.Group instance.\n * @typedef {Object} Group\n * @see SPE.Group\n */\n\n/**\n * A map of options to configure an SPE.Group instance.\n * @typedef {Object} GroupOptions\n *\n * @property {Object} texture An object describing the texture used by the group.\n *\n * @property {Object} texture.value An instance of THREE.Texture.\n *\n * @property {Object=} texture.frames A THREE.Vector2 instance describing the number\n *                                    of frames on the x- and y-axis of the given texture.\n *                                    If not provided, the texture will NOT be treated as\n *                                    a sprite-sheet and as such will NOT be animated.\n *\n * @property {Number} [texture.frameCount=texture.frames.x * texture.frames.y] The total number of frames in the sprite-sheet.\n *                                                                   Allows for sprite-sheets that don't fill the entire\n *                                                                   texture.\n *\n * @property {Number} texture.loop The number of loops through the sprite-sheet that should\n *                                 be performed over the course of a single particle's lifetime.\n *\n * @property {Number} fixedTimeStep If no `dt` (or `deltaTime`) value is passed to this group's\n *                                  `tick()` function, this number will be used to move the particle\n *                                  simulation forward. Value in SECONDS.\n *\n * @property {Boolean} hasPerspective Whether the distance a particle is from the camera should affect\n *                                    the particle's size.\n *\n * @property {Boolean} colorize Whether the particles in this group should be rendered with color, or\n *                              whether the only color of particles will come from the provided texture.\n *\n * @property {Number} blending One of Three.js's blending modes to apply to this group's `ShaderMaterial`.\n *\n * @property {Boolean} transparent Whether these particle's should be rendered with transparency.\n *\n * @property {Number} alphaTest Sets the alpha value to be used when running an alpha test on the `texture.value` property. Value between 0 and 1.\n *\n * @property {Boolean} depthWrite Whether rendering the group has any effect on the depth buffer.\n *\n * @property {Boolean} depthTest Whether to have depth test enabled when rendering this group.\n *\n * @property {Boolean} fog Whether this group's particles should be affected by their scene's fog.\n *\n * @property {Number} scale The scale factor to apply to this group's particle sizes. Useful for\n *                          setting particle sizes to be relative to renderer size.\n */\n\n/**\n * The SPE.Group class. Creates a new group, containing a material, geometry, and mesh.\n *\n * @constructor\n * @param {GroupOptions} options A map of options to configure the group instance.\n */\n\nSPE.Group = function (options) {\n  'use strict';\n\n  var utils = SPE.utils,\n      types = utils.types; // Ensure we have a map of options to play with\n\n  options = utils.ensureTypedArg(options, types.OBJECT, {});\n  options.texture = utils.ensureTypedArg(options.texture, types.OBJECT, {}); // Assign a UUID to this instance\n\n  this.uuid = THREE.Math.generateUUID(); // If no `deltaTime` value is passed to the `SPE.Group.tick` function,\n  // the value of this property will be used to advance the simulation.\n\n  this.fixedTimeStep = utils.ensureTypedArg(options.fixedTimeStep, types.NUMBER, 0.016); // Set properties used in the uniforms map, starting with the\n  // texture stuff.\n\n  this.texture = utils.ensureInstanceOf(options.texture.value, THREE.Texture, null);\n  this.textureFrames = utils.ensureInstanceOf(options.texture.frames, THREE.Vector2, new THREE.Vector2(1, 1));\n  this.textureFrameCount = utils.ensureTypedArg(options.texture.frameCount, types.NUMBER, this.textureFrames.x * this.textureFrames.y);\n  this.textureLoop = utils.ensureTypedArg(options.texture.loop, types.NUMBER, 1);\n  this.textureFrames.max(new THREE.Vector2(1, 1));\n  this.hasPerspective = utils.ensureTypedArg(options.hasPerspective, types.BOOLEAN, true);\n  this.colorize = utils.ensureTypedArg(options.colorize, types.BOOLEAN, true);\n  this.maxParticleCount = utils.ensureTypedArg(options.maxParticleCount, types.NUMBER, null); // Set properties used to define the ShaderMaterial's appearance.\n\n  this.blending = utils.ensureTypedArg(options.blending, types.NUMBER, THREE.AdditiveBlending);\n  this.transparent = utils.ensureTypedArg(options.transparent, types.BOOLEAN, true);\n  this.alphaTest = parseFloat(utils.ensureTypedArg(options.alphaTest, types.NUMBER, 0.0));\n  this.depthWrite = utils.ensureTypedArg(options.depthWrite, types.BOOLEAN, false);\n  this.depthTest = utils.ensureTypedArg(options.depthTest, types.BOOLEAN, true);\n  this.fog = utils.ensureTypedArg(options.fog, types.BOOLEAN, true);\n  this.scale = utils.ensureTypedArg(options.scale, types.NUMBER, 300); // Where emitter's go to curl up in a warm blanket and live\n  // out their days.\n\n  this.emitters = [];\n  this.emitterIDs = []; // Create properties for use by the emitter pooling functions.\n\n  this._pool = [];\n  this._poolCreationSettings = null;\n  this._createNewWhenPoolEmpty = 0; // Whether all attributes should be forced to updated\n  // their entire buffer contents on the next tick.\n  //\n  // Used when an emitter is removed.\n\n  this._attributesNeedRefresh = false;\n  this._attributesNeedDynamicReset = false;\n  this.particleCount = 0; // Map of uniforms to be applied to the ShaderMaterial instance.\n\n  this.uniforms = {\n    texture: {\n      type: 't',\n      value: this.texture\n    },\n    textureAnimation: {\n      type: 'v4',\n      value: new THREE.Vector4(this.textureFrames.x, this.textureFrames.y, this.textureFrameCount, Math.max(Math.abs(this.textureLoop), 1.0))\n    },\n    fogColor: {\n      type: 'c',\n      value: null\n    },\n    fogNear: {\n      type: 'f',\n      value: 10\n    },\n    fogFar: {\n      type: 'f',\n      value: 200\n    },\n    fogDensity: {\n      type: 'f',\n      value: 0.5\n    },\n    deltaTime: {\n      type: 'f',\n      value: 0\n    },\n    runTime: {\n      type: 'f',\n      value: 0\n    },\n    scale: {\n      type: 'f',\n      value: this.scale\n    }\n  }; // Add some defines into the mix...\n\n  this.defines = {\n    HAS_PERSPECTIVE: this.hasPerspective,\n    COLORIZE: this.colorize,\n    VALUE_OVER_LIFETIME_LENGTH: SPE.valueOverLifetimeLength,\n    SHOULD_ROTATE_TEXTURE: false,\n    SHOULD_ROTATE_PARTICLES: false,\n    SHOULD_WIGGLE_PARTICLES: false,\n    SHOULD_CALCULATE_SPRITE: this.textureFrames.x > 1 || this.textureFrames.y > 1\n  }; // Map of all attributes to be applied to the particles.\n  //\n  // See SPE.ShaderAttribute for a bit more info on this bit.\n\n  this.attributes = {\n    position: new SPE.ShaderAttribute('v3', true),\n    acceleration: new SPE.ShaderAttribute('v4', true),\n    // w component is drag\n    velocity: new SPE.ShaderAttribute('v3', true),\n    rotation: new SPE.ShaderAttribute('v4', true),\n    rotationCenter: new SPE.ShaderAttribute('v3', true),\n    params: new SPE.ShaderAttribute('v4', true),\n    // Holds (alive, age, delay, wiggle)\n    size: new SPE.ShaderAttribute('v4', true),\n    angle: new SPE.ShaderAttribute('v4', true),\n    color: new SPE.ShaderAttribute('v4', true),\n    opacity: new SPE.ShaderAttribute('v4', true)\n  };\n  this.attributeKeys = Object.keys(this.attributes);\n  this.attributeCount = this.attributeKeys.length; // Create the ShaderMaterial instance that'll help render the\n  // particles.\n\n  this.material = new THREE.ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: SPE.shaders.vertex,\n    fragmentShader: SPE.shaders.fragment,\n    blending: this.blending,\n    transparent: this.transparent,\n    alphaTest: this.alphaTest,\n    depthWrite: this.depthWrite,\n    depthTest: this.depthTest,\n    defines: this.defines,\n    fog: this.fog\n  }); // Create the BufferGeometry and Points instances, ensuring\n  // the geometry and material are given to the latter.\n\n  this.geometry = new THREE.BufferGeometry();\n  this.mesh = new THREE.Points(this.geometry, this.material);\n\n  if (this.maxParticleCount === null) {\n    console.warn('SPE.Group: No maxParticleCount specified. Adding emitters after rendering will probably cause errors.');\n  }\n};\n\nSPE.Group.constructor = SPE.Group;\n\nSPE.Group.prototype._updateDefines = function () {\n  'use strict';\n\n  var emitters = this.emitters,\n      i = emitters.length - 1,\n      emitter,\n      defines = this.defines;\n\n  for (i; i >= 0; --i) {\n    emitter = emitters[i]; // Only do angle calculation if there's no spritesheet defined.\n    //\n    // Saves calculations being done and then overwritten in the shaders.\n\n    if (!defines.SHOULD_CALCULATE_SPRITE) {\n      defines.SHOULD_ROTATE_TEXTURE = defines.SHOULD_ROTATE_TEXTURE || !!Math.max(Math.max.apply(null, emitter.angle.value), Math.max.apply(null, emitter.angle.spread));\n    }\n\n    defines.SHOULD_ROTATE_PARTICLES = defines.SHOULD_ROTATE_PARTICLES || !!Math.max(emitter.rotation.angle, emitter.rotation.angleSpread);\n    defines.SHOULD_WIGGLE_PARTICLES = defines.SHOULD_WIGGLE_PARTICLES || !!Math.max(emitter.wiggle.value, emitter.wiggle.spread);\n  }\n\n  this.material.needsUpdate = true;\n};\n\nSPE.Group.prototype._applyAttributesToGeometry = function () {\n  'use strict';\n\n  var attributes = this.attributes,\n      geometry = this.geometry,\n      geometryAttributes = geometry.attributes,\n      attribute,\n      geometryAttribute; // Loop through all the shader attributes and assign (or re-assign)\n  // typed array buffers to each one.\n\n  for (var attr in attributes) {\n    if (attributes.hasOwnProperty(attr)) {\n      attribute = attributes[attr];\n      geometryAttribute = geometryAttributes[attr]; // Update the array if this attribute exists on the geometry.\n      //\n      // This needs to be done because the attribute's typed array might have\n      // been resized and reinstantiated, and might now be looking at a\n      // different ArrayBuffer, so reference needs updating.\n\n      if (geometryAttribute) {\n        geometryAttribute.array = attribute.typedArray.array;\n      } // // Add the attribute to the geometry if it doesn't already exist.\n      else {\n          geometry.addAttribute(attr, attribute.bufferAttribute);\n        } // Mark the attribute as needing an update the next time a frame is rendered.\n\n\n      attribute.bufferAttribute.needsUpdate = true;\n    }\n  } // Mark the draw range on the geometry. This will ensure\n  // only the values in the attribute buffers that are\n  // associated with a particle will be used in THREE's\n  // render cycle.\n\n\n  this.geometry.setDrawRange(0, this.particleCount);\n};\n/**\n * Adds an SPE.Emitter instance to this group, creating particle values and\n * assigning them to this group's shader attributes.\n *\n * @param {Emitter} emitter The emitter to add to this group.\n */\n\n\nSPE.Group.prototype.addEmitter = function (emitter) {\n  'use strict'; // Ensure an actual emitter instance is passed here.\n  //\n  // Decided not to throw here, just in case a scene's\n  // rendering would be paused. Logging an error instead\n  // of stopping execution if exceptions aren't caught.\n\n  if (emitter instanceof SPE.Emitter === false) {\n    console.error('`emitter` argument must be instance of SPE.Emitter. Was provided with:', emitter);\n    return;\n  } // If the emitter already exists as a member of this group, then\n  // stop here, we don't want to add it again.\n  else if (this.emitterIDs.indexOf(emitter.uuid) > -1) {\n      console.error('Emitter already exists in this group. Will not add again.');\n      return;\n    } // And finally, if the emitter is a member of another group,\n    // don't add it to this group.\n    else if (emitter.group !== null) {\n        console.error('Emitter already belongs to another group. Will not add to requested group.');\n        return;\n      }\n\n  var attributes = this.attributes,\n      start = this.particleCount,\n      end = start + emitter.particleCount; // Update this group's particle count.\n\n  this.particleCount = end; // Emit a warning if the emitter being added will exceed the buffer sizes specified.\n\n  if (this.maxParticleCount !== null && this.particleCount > this.maxParticleCount) {\n    console.warn('SPE.Group: maxParticleCount exceeded. Requesting', this.particleCount, 'particles, can support only', this.maxParticleCount);\n  } // Set the `particlesPerSecond` value (PPS) on the emitter.\n  // It's used to determine how many particles to release\n  // on a per-frame basis.\n\n\n  emitter._calculatePPSValue(emitter.maxAge._value + emitter.maxAge._spread);\n\n  emitter._setBufferUpdateRanges(this.attributeKeys); // Store the offset value in the TypedArray attributes for this emitter.\n\n\n  emitter._setAttributeOffset(start); // Save a reference to this group on the emitter so it knows\n  // where it belongs.\n\n\n  emitter.group = this; // Store reference to the attributes on the emitter for\n  // easier access during the emitter's tick function.\n\n  emitter.attributes = this.attributes; // Ensure the attributes and their BufferAttributes exist, and their\n  // TypedArrays are of the correct size.\n\n  for (var attr in attributes) {\n    if (attributes.hasOwnProperty(attr)) {\n      // When creating a buffer, pass through the maxParticle count\n      // if one is specified.\n      attributes[attr]._createBufferAttribute(this.maxParticleCount !== null ? this.maxParticleCount : this.particleCount);\n    }\n  } // Loop through each particle this emitter wants to have, and create the attributes values,\n  // storing them in the TypedArrays that each attribute holds.\n\n\n  for (var i = start; i < end; ++i) {\n    emitter._assignPositionValue(i);\n\n    emitter._assignForceValue(i, 'velocity');\n\n    emitter._assignForceValue(i, 'acceleration');\n\n    emitter._assignAbsLifetimeValue(i, 'opacity');\n\n    emitter._assignAbsLifetimeValue(i, 'size');\n\n    emitter._assignAngleValue(i);\n\n    emitter._assignRotationValue(i);\n\n    emitter._assignParamsValue(i);\n\n    emitter._assignColorValue(i);\n  } // Update the geometry and make sure the attributes are referencing\n  // the typed arrays properly.\n\n\n  this._applyAttributesToGeometry(); // Store this emitter in this group's emitter's store.\n\n\n  this.emitters.push(emitter);\n  this.emitterIDs.push(emitter.uuid); // Update certain flags to enable shader calculations only if they're necessary.\n\n  this._updateDefines(emitter); // Update the material since defines might have changed\n\n\n  this.material.needsUpdate = true;\n  this.geometry.needsUpdate = true;\n  this._attributesNeedRefresh = true; // Return the group to enable chaining.\n\n  return this;\n};\n/**\n * Removes an SPE.Emitter instance from this group. When called,\n * all particle's belonging to the given emitter will be instantly\n * removed from the scene.\n *\n * @param {Emitter} emitter The emitter to add to this group.\n */\n\n\nSPE.Group.prototype.removeEmitter = function (emitter) {\n  'use strict';\n\n  var emitterIndex = this.emitterIDs.indexOf(emitter.uuid); // Ensure an actual emitter instance is passed here.\n  //\n  // Decided not to throw here, just in case a scene's\n  // rendering would be paused. Logging an error instead\n  // of stopping execution if exceptions aren't caught.\n\n  if (emitter instanceof SPE.Emitter === false) {\n    console.error('`emitter` argument must be instance of SPE.Emitter. Was provided with:', emitter);\n    return;\n  } // Issue an error if the emitter isn't a member of this group.\n  else if (emitterIndex === -1) {\n      console.error('Emitter does not exist in this group. Will not remove.');\n      return;\n    } // Kill all particles by marking them as dead\n  // and their age as 0.\n\n\n  var start = emitter.attributeOffset,\n      end = start + emitter.particleCount,\n      params = this.attributes.params.typedArray; // Set alive and age to zero.\n\n  for (var i = start; i < end; ++i) {\n    params.array[i * 4] = 0.0;\n    params.array[i * 4 + 1] = 0.0;\n  } // Remove the emitter from this group's \"store\".\n\n\n  this.emitters.splice(emitterIndex, 1);\n  this.emitterIDs.splice(emitterIndex, 1); // Remove this emitter's attribute values from all shader attributes.\n  // The `.splice()` call here also marks each attribute's buffer\n  // as needing to update it's entire contents.\n\n  for (var attr in this.attributes) {\n    if (this.attributes.hasOwnProperty(attr)) {\n      this.attributes[attr].splice(start, end);\n    }\n  } // Ensure this group's particle count is correct.\n\n\n  this.particleCount -= emitter.particleCount; // Call the emitter's remove method.\n\n  emitter._onRemove(); // Set a flag to indicate that the attribute buffers should\n  // be updated in their entirety on the next frame.\n\n\n  this._attributesNeedRefresh = true;\n};\n/**\n * Fetch a single emitter instance from the pool.\n * If there are no objects in the pool, a new emitter will be\n * created if specified.\n *\n * @return {Emitter|null}\n */\n\n\nSPE.Group.prototype.getFromPool = function () {\n  'use strict';\n\n  var pool = this._pool,\n      createNew = this._createNewWhenPoolEmpty;\n\n  if (pool.length) {\n    return pool.pop();\n  } else if (createNew) {\n    return new SPE.Emitter(this._poolCreationSettings);\n  }\n\n  return null;\n};\n/**\n * Release an emitter into the pool.\n *\n * @param  {ShaderParticleEmitter} emitter\n * @return {Group} This group instance.\n */\n\n\nSPE.Group.prototype.releaseIntoPool = function (emitter) {\n  'use strict';\n\n  if (emitter instanceof SPE.Emitter === false) {\n    console.error('Argument is not instanceof SPE.Emitter:', emitter);\n    return;\n  }\n\n  emitter.reset();\n\n  this._pool.unshift(emitter);\n\n  return this;\n};\n/**\n * Get the pool array\n *\n * @return {Array}\n */\n\n\nSPE.Group.prototype.getPool = function () {\n  'use strict';\n\n  return this._pool;\n};\n/**\n * Add a pool of emitters to this particle group\n *\n * @param {Number} numEmitters      The number of emitters to add to the pool.\n * @param {EmitterOptions|Array} emitterOptions  An object, or array of objects, describing the options to pass to each emitter.\n * @param {Boolean} createNew       Should a new emitter be created if the pool runs out?\n * @return {Group} This group instance.\n */\n\n\nSPE.Group.prototype.addPool = function (numEmitters, emitterOptions, createNew) {\n  'use strict';\n\n  var emitter; // Save relevant settings and flags.\n\n  this._poolCreationSettings = emitterOptions;\n  this._createNewWhenPoolEmpty = !!createNew; // Create the emitters, add them to this group and the pool.\n\n  for (var i = 0; i < numEmitters; ++i) {\n    if (Array.isArray(emitterOptions)) {\n      emitter = new SPE.Emitter(emitterOptions[i]);\n    } else {\n      emitter = new SPE.Emitter(emitterOptions);\n    }\n\n    this.addEmitter(emitter);\n    this.releaseIntoPool(emitter);\n  }\n\n  return this;\n};\n\nSPE.Group.prototype._triggerSingleEmitter = function (pos) {\n  'use strict';\n\n  var emitter = this.getFromPool(),\n      self = this;\n\n  if (emitter === null) {\n    console.log('SPE.Group pool ran out.');\n    return;\n  } // TODO:\n  // - Make sure buffers are update with thus new position.\n\n\n  if (pos instanceof THREE.Vector3) {\n    emitter.position.value.copy(pos); // Trigger the setter for this property to force an\n    // update to the emitter's position attribute.\n\n    emitter.position.value = emitter.position.value;\n  }\n\n  emitter.enable();\n  setTimeout(function () {\n    emitter.disable();\n    self.releaseIntoPool(emitter);\n  }, Math.max(emitter.duration, emitter.maxAge.value + emitter.maxAge.spread) * 1000);\n  return this;\n};\n/**\n * Set a given number of emitters as alive, with an optional position\n * vector3 to move them to.\n *\n * @param  {Number} numEmitters The number of emitters to activate\n * @param  {Object} [position=undefined] A THREE.Vector3 instance describing the position to activate the emitter(s) at.\n * @return {Group} This group instance.\n */\n\n\nSPE.Group.prototype.triggerPoolEmitter = function (numEmitters, position) {\n  'use strict';\n\n  if (typeof numEmitters === 'number' && numEmitters > 1) {\n    for (var i = 0; i < numEmitters; ++i) {\n      this._triggerSingleEmitter(position);\n    }\n  } else {\n    this._triggerSingleEmitter(position);\n  }\n\n  return this;\n};\n\nSPE.Group.prototype._updateUniforms = function (dt) {\n  'use strict';\n\n  this.uniforms.runTime.value += dt;\n  this.uniforms.deltaTime.value = dt;\n};\n\nSPE.Group.prototype._resetBufferRanges = function () {\n  'use strict';\n\n  var keys = this.attributeKeys,\n      i = this.attributeCount - 1,\n      attrs = this.attributes;\n\n  for (i; i >= 0; --i) {\n    attrs[keys[i]].resetUpdateRange();\n  }\n};\n\nSPE.Group.prototype._updateBuffers = function (emitter) {\n  'use strict';\n\n  var keys = this.attributeKeys,\n      i = this.attributeCount - 1,\n      attrs = this.attributes,\n      emitterRanges = emitter.bufferUpdateRanges,\n      key,\n      emitterAttr,\n      attr;\n\n  for (i; i >= 0; --i) {\n    key = keys[i];\n    emitterAttr = emitterRanges[key];\n    attr = attrs[key];\n    attr.setUpdateRange(emitterAttr.min, emitterAttr.max);\n    attr.flagUpdate();\n  }\n};\n/**\n * Simulate all the emitter's belonging to this group, updating\n * attribute values along the way.\n * @param  {Number} [dt=Group's `fixedTimeStep` value] The number of seconds to simulate the group's emitters for (deltaTime)\n */\n\n\nSPE.Group.prototype.tick = function (dt) {\n  'use strict';\n\n  var emitters = this.emitters,\n      numEmitters = emitters.length,\n      deltaTime = dt || this.fixedTimeStep,\n      keys = this.attributeKeys,\n      i,\n      attrs = this.attributes; // Update uniform values.\n\n  this._updateUniforms(deltaTime); // Reset buffer update ranges on the shader attributes.\n\n\n  this._resetBufferRanges(); // If nothing needs updating, then stop here.\n\n\n  if (numEmitters === 0 && this._attributesNeedRefresh === false && this._attributesNeedDynamicReset === false) {\n    return;\n  } // Loop through each emitter in this group and\n  // simulate it, then update the shader attribute\n  // buffers.\n\n\n  for (var i = 0, emitter; i < numEmitters; ++i) {\n    emitter = emitters[i];\n    emitter.tick(deltaTime);\n\n    this._updateBuffers(emitter);\n  } // If the shader attributes have been refreshed,\n  // then the dynamic properties of each buffer\n  // attribute will need to be reset back to\n  // what they should be.\n\n\n  if (this._attributesNeedDynamicReset === true) {\n    i = this.attributeCount - 1;\n\n    for (i; i >= 0; --i) {\n      attrs[keys[i]].resetDynamic();\n    }\n\n    this._attributesNeedDynamicReset = false;\n  } // If this group's shader attributes need a full refresh\n  // then mark each attribute's buffer attribute as\n  // needing so.\n\n\n  if (this._attributesNeedRefresh === true) {\n    i = this.attributeCount - 1;\n\n    for (i; i >= 0; --i) {\n      attrs[keys[i]].forceUpdateAll();\n    }\n\n    this._attributesNeedRefresh = false;\n    this._attributesNeedDynamicReset = true;\n  }\n};\n/**\n * Dipose the geometry and material for the group.\n *\n * @return {Group} Group instance.\n */\n\n\nSPE.Group.prototype.dispose = function () {\n  'use strict';\n\n  this.geometry.dispose();\n  this.material.dispose();\n  return this;\n};\n/**\n * An SPE.Emitter instance.\n * @typedef {Object} Emitter\n * @see SPE.Emitter\n */\n\n/**\n * A map of options to configure an SPE.Emitter instance.\n *\n * @typedef {Object} EmitterOptions\n *\n * @property {distribution} [type=BOX] The default distribution this emitter should use to control\n *                         its particle's spawn position and force behaviour.\n *                         Must be an SPE.distributions.* value.\n *\n *\n * @property {Number} [particleCount=100] The total number of particles this emitter will hold. NOTE: this is not the number\n *                                  of particles emitted in a second, or anything like that. The number of particles\n *                                  emitted per-second is calculated by particleCount / maxAge (approximately!)\n *\n * @property {Number|null} [duration=null] The duration in seconds that this emitter should live for. If not specified, the emitter\n *                                         will emit particles indefinitely.\n *                                         NOTE: When an emitter is older than a specified duration, the emitter is NOT removed from\n *                                         it's group, but rather is just marked as dead, allowing it to be reanimated at a later time\n *                                         using `SPE.Emitter.prototype.enable()`.\n *\n * @property {Boolean} [isStatic=false] Whether this emitter should be not be simulated (true).\n * @property {Boolean} [activeMultiplier=1] A value between 0 and 1 describing what percentage of this emitter's particlesPerSecond should be\n *                                          emitted, where 0 is 0%, and 1 is 100%.\n *                                          For example, having an emitter with 100 particles, a maxAge of 2, yields a particlesPerSecond\n *                                          value of 50. Setting `activeMultiplier` to 0.5, then, will only emit 25 particles per second (0.5 = 50%).\n *                                          Values greater than 1 will emulate a burst of particles, causing the emitter to run out of particles\n *                                          before it's next activation cycle.\n *\n * @property {Boolean} [direction=1] The direction of the emitter. If value is `1`, emitter will start at beginning of particle's lifecycle.\n *                                   If value is `-1`, emitter will start at end of particle's lifecycle and work it's way backwards.\n *\n * @property {Object} [maxAge={}] An object describing the particle's maximum age in seconds.\n * @property {Number} [maxAge.value=2] A number between 0 and 1 describing the amount of maxAge to apply to all particles.\n * @property {Number} [maxAge.spread=0] A number describing the maxAge variance on a per-particle basis.\n *\n *\n * @property {Object} [position={}] An object describing this emitter's position.\n * @property {Object} [position.value=new THREE.Vector3()] A THREE.Vector3 instance describing this emitter's base position.\n * @property {Object} [position.spread=new THREE.Vector3()] A THREE.Vector3 instance describing this emitter's position variance on a per-particle basis.\n *                                                          Note that when using a SPHERE or DISC distribution, only the x-component\n *                                                          of this vector is used.\n * @property {Object} [position.spreadClamp=new THREE.Vector3()] A THREE.Vector3 instance describing the numeric multiples the particle's should\n *                                                               be spread out over.\n *                                                               Note that when using a SPHERE or DISC distribution, only the x-component\n *                                                               of this vector is used.\n * @property {Number} [position.radius=10] This emitter's base radius.\n * @property {Object} [position.radiusScale=new THREE.Vector3()] A THREE.Vector3 instance describing the radius's scale in all three axes. Allows a SPHERE or DISC to be squashed or stretched.\n * @property {distribution} [position.distribution=value of the `type` option.] A specific distribution to use when radiusing particles. Overrides the `type` option.\n * @property {Boolean} [position.randomise=false] When a particle is re-spawned, whether it's position should be re-randomised or not. Can incur a performance hit.\n *\n *\n * @property {Object} [velocity={}] An object describing this particle velocity.\n * @property {Object} [velocity.value=new THREE.Vector3()] A THREE.Vector3 instance describing this emitter's base velocity.\n * @property {Object} [velocity.spread=new THREE.Vector3()] A THREE.Vector3 instance describing this emitter's velocity variance on a per-particle basis.\n *                                                          Note that when using a SPHERE or DISC distribution, only the x-component\n *                                                          of this vector is used.\n * @property {distribution} [velocity.distribution=value of the `type` option.] A specific distribution to use when calculating a particle's velocity. Overrides the `type` option.\n * @property {Boolean} [velocity.randomise=false] When a particle is re-spawned, whether it's velocity should be re-randomised or not. Can incur a performance hit.\n *\n *\n * @property {Object} [acceleration={}] An object describing this particle's acceleration.\n * @property {Object} [acceleration.value=new THREE.Vector3()] A THREE.Vector3 instance describing this emitter's base acceleration.\n * @property {Object} [acceleration.spread=new THREE.Vector3()] A THREE.Vector3 instance describing this emitter's acceleration variance on a per-particle basis.\n *                           Note that when using a SPHERE or DISC distribution, only the x-component\n *                           of this vector is used.\n * @property {distribution} [acceleration.distribution=value of the `type` option.] A specific distribution to use when calculating a particle's acceleration. Overrides the `type` option.\n * @property {Boolean} [acceleration.randomise=false] When a particle is re-spawned, whether it's acceleration should be re-randomised or not. Can incur a performance hit.\n *\n *\n * @property {Object} [drag={}] An object describing this particle drag. Drag is applied to both velocity and acceleration values.\n * @property {Number} [drag.value=0] A number between 0 and 1 describing the amount of drag to apply to all particles.\n * @property {Number} [drag.spread=0] A number describing the drag variance on a per-particle basis.\n * @property {Boolean} [drag.randomise=false] When a particle is re-spawned, whether it's drag should be re-randomised or not. Can incur a performance hit.\n *\n *\n * @property {Object} [wiggle={}] This is quite a fun one! The values of this object will determine whether a particle will wiggle, or jiggle, or wave,\n *                                or shimmy, or waggle, or... Well you get the idea. The wiggle is calculated over-time, meaning that a particle will\n *                                start off with no wiggle, and end up wiggling about with the distance of the `value` specified by the time it dies.\n *                                It's quite handy to simulate fire embers, or similar effects where the particle's position should slightly change over\n *                                time, and such change isn't easily controlled by rotation, velocity, or acceleration. The wiggle is a combination of sin and cos calculations, so is circular in nature.\n * @property {Number} [wiggle.value=0] A number describing the amount of wiggle to apply to all particles. It's measured in distance.\n * @property {Number} [wiggle.spread=0] A number describing the wiggle variance on a per-particle basis.\n *\n *\n * @property {Object} [rotation={}] An object describing this emitter's rotation. It can either be static, or set to rotate from 0radians to the value of `rotation.value`\n *                                  over a particle's lifetime. Rotation values affect both a particle's position and the forces applied to it.\n * @property {Object} [rotation.axis=new THREE.Vector3(0, 1, 0)] A THREE.Vector3 instance describing this emitter's axis of rotation.\n * @property {Object} [rotation.axisSpread=new THREE.Vector3()] A THREE.Vector3 instance describing the amount of variance to apply to the axis of rotation on\n *                                                              a per-particle basis.\n * @property {Number} [rotation.angle=0] The angle of rotation, given in radians. If `rotation.static` is true, the emitter will start off rotated at this angle, and stay as such.\n *                                       Otherwise, the particles will rotate from 0radians to this value over their lifetimes.\n * @property {Number} [rotation.angleSpread=0] The amount of variance in each particle's rotation angle.\n * @property {Boolean} [rotation.static=false] Whether the rotation should be static or not.\n * @property {Object} [rotation.center=The value of `position.value`] A THREE.Vector3 instance describing the center point of rotation.\n * @property {Boolean} [rotation.randomise=false] When a particle is re-spawned, whether it's rotation should be re-randomised or not. Can incur a performance hit.\n *\n *\n * @property {Object} [color={}] An object describing a particle's color. This property is a \"value-over-lifetime\" property, meaning an array of values and spreads can be\n *                               given to describe specific value changes over a particle's lifetime.\n *                               Depending on the value of SPE.valueOverLifetimeLength, if arrays of THREE.Color instances are given, then the array will be interpolated to\n *                               have a length matching the value of SPE.valueOverLifetimeLength.\n * @property {Object} [color.value=new THREE.Color()] Either a single THREE.Color instance, or an array of THREE.Color instances to describe the color of a particle over it's lifetime.\n * @property {Object} [color.spread=new THREE.Vector3()] Either a single THREE.Vector3 instance, or an array of THREE.Vector3 instances to describe the color variance of a particle over it's lifetime.\n * @property {Boolean} [color.randomise=false] When a particle is re-spawned, whether it's color should be re-randomised or not. Can incur a performance hit.\n *\n *\n * @property {Object} [opacity={}] An object describing a particle's opacity. This property is a \"value-over-lifetime\" property, meaning an array of values and spreads can be\n *                               given to describe specific value changes over a particle's lifetime.\n *                               Depending on the value of SPE.valueOverLifetimeLength, if arrays of numbers are given, then the array will be interpolated to\n *                               have a length matching the value of SPE.valueOverLifetimeLength.\n * @property {Number} [opacity.value=1] Either a single number, or an array of numbers to describe the opacity of a particle over it's lifetime.\n * @property {Number} [opacity.spread=0] Either a single number, or an array of numbers to describe the opacity variance of a particle over it's lifetime.\n * @property {Boolean} [opacity.randomise=false] When a particle is re-spawned, whether it's opacity should be re-randomised or not. Can incur a performance hit.\n *\n *\n * @property {Object} [size={}] An object describing a particle's size. This property is a \"value-over-lifetime\" property, meaning an array of values and spreads can be\n *                               given to describe specific value changes over a particle's lifetime.\n *                               Depending on the value of SPE.valueOverLifetimeLength, if arrays of numbers are given, then the array will be interpolated to\n *                               have a length matching the value of SPE.valueOverLifetimeLength.\n * @property {Number} [size.value=1] Either a single number, or an array of numbers to describe the size of a particle over it's lifetime.\n * @property {Number} [size.spread=0] Either a single number, or an array of numbers to describe the size variance of a particle over it's lifetime.\n * @property {Boolean} [size.randomise=false] When a particle is re-spawned, whether it's size should be re-randomised or not. Can incur a performance hit.\n *\n *\n * @property {Object} [angle={}] An object describing a particle's angle. The angle is a 2d-rotation, measured in radians, applied to the particle's texture.\n *                               NOTE: if a particle's texture is a sprite-sheet, this value IS IGNORED.\n *                               This property is a \"value-over-lifetime\" property, meaning an array of values and spreads can be\n *                               given to describe specific value changes over a particle's lifetime.\n *                               Depending on the value of SPE.valueOverLifetimeLength, if arrays of numbers are given, then the array will be interpolated to\n *                               have a length matching the value of SPE.valueOverLifetimeLength.\n * @property {Number} [angle.value=0] Either a single number, or an array of numbers to describe the angle of a particle over it's lifetime.\n * @property {Number} [angle.spread=0] Either a single number, or an array of numbers to describe the angle variance of a particle over it's lifetime.\n * @property {Boolean} [angle.randomise=false] When a particle is re-spawned, whether it's angle should be re-randomised or not. Can incur a performance hit.\n *\n */\n\n/**\n * The SPE.Emitter class.\n *\n * @constructor\n *\n * @param {EmitterOptions} options A map of options to configure the emitter.\n */\n\n\nSPE.Emitter = function (options) {\n  'use strict';\n\n  var utils = SPE.utils,\n      types = utils.types,\n      lifetimeLength = SPE.valueOverLifetimeLength; // Ensure we have a map of options to play with,\n  // and that each option is in the correct format.\n\n  options = utils.ensureTypedArg(options, types.OBJECT, {});\n  options.position = utils.ensureTypedArg(options.position, types.OBJECT, {});\n  options.velocity = utils.ensureTypedArg(options.velocity, types.OBJECT, {});\n  options.acceleration = utils.ensureTypedArg(options.acceleration, types.OBJECT, {});\n  options.radius = utils.ensureTypedArg(options.radius, types.OBJECT, {});\n  options.drag = utils.ensureTypedArg(options.drag, types.OBJECT, {});\n  options.rotation = utils.ensureTypedArg(options.rotation, types.OBJECT, {});\n  options.color = utils.ensureTypedArg(options.color, types.OBJECT, {});\n  options.opacity = utils.ensureTypedArg(options.opacity, types.OBJECT, {});\n  options.size = utils.ensureTypedArg(options.size, types.OBJECT, {});\n  options.angle = utils.ensureTypedArg(options.angle, types.OBJECT, {});\n  options.wiggle = utils.ensureTypedArg(options.wiggle, types.OBJECT, {});\n  options.maxAge = utils.ensureTypedArg(options.maxAge, types.OBJECT, {});\n\n  if (options.onParticleSpawn) {\n    console.warn('onParticleSpawn has been removed. Please set properties directly to alter values at runtime.');\n  }\n\n  this.uuid = THREE.Math.generateUUID();\n  this.type = utils.ensureTypedArg(options.type, types.NUMBER, SPE.distributions.BOX); // Start assigning properties...kicking it off with props that DON'T support values over\n  // lifetimes.\n  //\n  // Btw, values over lifetimes are just the new way of referring to *Start, *Middle, and *End.\n\n  this.position = {\n    _value: utils.ensureInstanceOf(options.position.value, THREE.Vector3, new THREE.Vector3()),\n    _spread: utils.ensureInstanceOf(options.position.spread, THREE.Vector3, new THREE.Vector3()),\n    _spreadClamp: utils.ensureInstanceOf(options.position.spreadClamp, THREE.Vector3, new THREE.Vector3()),\n    _distribution: utils.ensureTypedArg(options.position.distribution, types.NUMBER, this.type),\n    _randomise: utils.ensureTypedArg(options.position.randomise, types.BOOLEAN, false),\n    _radius: utils.ensureTypedArg(options.position.radius, types.NUMBER, 10),\n    _radiusScale: utils.ensureInstanceOf(options.position.radiusScale, THREE.Vector3, new THREE.Vector3(1, 1, 1)),\n    _distributionClamp: utils.ensureTypedArg(options.position.distributionClamp, types.NUMBER, 0)\n  };\n  this.velocity = {\n    _value: utils.ensureInstanceOf(options.velocity.value, THREE.Vector3, new THREE.Vector3()),\n    _spread: utils.ensureInstanceOf(options.velocity.spread, THREE.Vector3, new THREE.Vector3()),\n    _distribution: utils.ensureTypedArg(options.velocity.distribution, types.NUMBER, this.type),\n    _randomise: utils.ensureTypedArg(options.position.randomise, types.BOOLEAN, false)\n  };\n  this.acceleration = {\n    _value: utils.ensureInstanceOf(options.acceleration.value, THREE.Vector3, new THREE.Vector3()),\n    _spread: utils.ensureInstanceOf(options.acceleration.spread, THREE.Vector3, new THREE.Vector3()),\n    _distribution: utils.ensureTypedArg(options.acceleration.distribution, types.NUMBER, this.type),\n    _randomise: utils.ensureTypedArg(options.position.randomise, types.BOOLEAN, false)\n  };\n  this.drag = {\n    _value: utils.ensureTypedArg(options.drag.value, types.NUMBER, 0),\n    _spread: utils.ensureTypedArg(options.drag.spread, types.NUMBER, 0),\n    _randomise: utils.ensureTypedArg(options.position.randomise, types.BOOLEAN, false)\n  };\n  this.wiggle = {\n    _value: utils.ensureTypedArg(options.wiggle.value, types.NUMBER, 0),\n    _spread: utils.ensureTypedArg(options.wiggle.spread, types.NUMBER, 0)\n  };\n  this.rotation = {\n    _axis: utils.ensureInstanceOf(options.rotation.axis, THREE.Vector3, new THREE.Vector3(0.0, 1.0, 0.0)),\n    _axisSpread: utils.ensureInstanceOf(options.rotation.axisSpread, THREE.Vector3, new THREE.Vector3()),\n    _angle: utils.ensureTypedArg(options.rotation.angle, types.NUMBER, 0),\n    _angleSpread: utils.ensureTypedArg(options.rotation.angleSpread, types.NUMBER, 0),\n    _static: utils.ensureTypedArg(options.rotation[\"static\"], types.BOOLEAN, false),\n    _center: utils.ensureInstanceOf(options.rotation.center, THREE.Vector3, this.position._value.clone()),\n    _randomise: utils.ensureTypedArg(options.position.randomise, types.BOOLEAN, false)\n  };\n  this.maxAge = {\n    _value: utils.ensureTypedArg(options.maxAge.value, types.NUMBER, 2),\n    _spread: utils.ensureTypedArg(options.maxAge.spread, types.NUMBER, 0)\n  }; // The following properties can support either single values, or an array of values that change\n  // the property over a particle's lifetime (value over lifetime).\n\n  this.color = {\n    _value: utils.ensureArrayInstanceOf(options.color.value, THREE.Color, new THREE.Color()),\n    _spread: utils.ensureArrayInstanceOf(options.color.spread, THREE.Vector3, new THREE.Vector3()),\n    _randomise: utils.ensureTypedArg(options.position.randomise, types.BOOLEAN, false)\n  };\n  this.opacity = {\n    _value: utils.ensureArrayTypedArg(options.opacity.value, types.NUMBER, 1),\n    _spread: utils.ensureArrayTypedArg(options.opacity.spread, types.NUMBER, 0),\n    _randomise: utils.ensureTypedArg(options.position.randomise, types.BOOLEAN, false)\n  };\n  this.size = {\n    _value: utils.ensureArrayTypedArg(options.size.value, types.NUMBER, 1),\n    _spread: utils.ensureArrayTypedArg(options.size.spread, types.NUMBER, 0),\n    _randomise: utils.ensureTypedArg(options.position.randomise, types.BOOLEAN, false)\n  };\n  this.angle = {\n    _value: utils.ensureArrayTypedArg(options.angle.value, types.NUMBER, 0),\n    _spread: utils.ensureArrayTypedArg(options.angle.spread, types.NUMBER, 0),\n    _randomise: utils.ensureTypedArg(options.position.randomise, types.BOOLEAN, false)\n  }; // Assign renaining option values.\n\n  this.particleCount = utils.ensureTypedArg(options.particleCount, types.NUMBER, 100);\n  this.duration = utils.ensureTypedArg(options.duration, types.NUMBER, null);\n  this.isStatic = utils.ensureTypedArg(options.isStatic, types.BOOLEAN, false);\n  this.activeMultiplier = utils.ensureTypedArg(options.activeMultiplier, types.NUMBER, 1);\n  this.direction = utils.ensureTypedArg(options.direction, types.NUMBER, 1); // Whether this emitter is alive or not.\n\n  this.alive = utils.ensureTypedArg(options.alive, types.BOOLEAN, true); // The following properties are set internally and are not\n  // user-controllable.\n\n  this.particlesPerSecond = 0; // The current particle index for which particles should\n  // be marked as active on the next update cycle.\n\n  this.activationIndex = 0; // The offset in the typed arrays this emitter's\n  // particle's values will start at\n\n  this.attributeOffset = 0; // The end of the range in the attribute buffers\n\n  this.attributeEnd = 0; // Holds the time the emitter has been alive for.\n\n  this.age = 0.0; // Holds the number of currently-alive particles\n\n  this.activeParticleCount = 0.0; // Holds a reference to this emitter's group once\n  // it's added to one.\n\n  this.group = null; // Holds a reference to this emitter's group's attributes object\n  // for easier access.\n\n  this.attributes = null; // Holds a reference to the params attribute's typed array\n  // for quicker access.\n\n  this.paramsArray = null; // A set of flags to determine whether particular properties\n  // should be re-randomised when a particle is reset.\n  //\n  // If a `randomise` property is given, this is preferred.\n  // Otherwise, it looks at whether a spread value has been\n  // given.\n  //\n  // It allows randomization to be turned off as desired. If\n  // all randomization is turned off, then I'd expect a performance\n  // boost as no attribute buffers (excluding the `params`)\n  // would have to be re-passed to the GPU each frame (since nothing\n  // except the `params` attribute would have changed).\n\n  this.resetFlags = {\n    // params: utils.ensureTypedArg( options.maxAge.randomise, types.BOOLEAN, !!options.maxAge.spread ) ||\n    //     utils.ensureTypedArg( options.wiggle.randomise, types.BOOLEAN, !!options.wiggle.spread ),\n    position: utils.ensureTypedArg(options.position.randomise, types.BOOLEAN, false) || utils.ensureTypedArg(options.radius.randomise, types.BOOLEAN, false),\n    velocity: utils.ensureTypedArg(options.velocity.randomise, types.BOOLEAN, false),\n    acceleration: utils.ensureTypedArg(options.acceleration.randomise, types.BOOLEAN, false) || utils.ensureTypedArg(options.drag.randomise, types.BOOLEAN, false),\n    rotation: utils.ensureTypedArg(options.rotation.randomise, types.BOOLEAN, false),\n    rotationCenter: utils.ensureTypedArg(options.rotation.randomise, types.BOOLEAN, false),\n    size: utils.ensureTypedArg(options.size.randomise, types.BOOLEAN, false),\n    color: utils.ensureTypedArg(options.color.randomise, types.BOOLEAN, false),\n    opacity: utils.ensureTypedArg(options.opacity.randomise, types.BOOLEAN, false),\n    angle: utils.ensureTypedArg(options.angle.randomise, types.BOOLEAN, false)\n  };\n  this.updateFlags = {};\n  this.updateCounts = {}; // A map to indicate which emitter parameters should update\n  // which attribute.\n\n  this.updateMap = {\n    maxAge: 'params',\n    position: 'position',\n    velocity: 'velocity',\n    acceleration: 'acceleration',\n    drag: 'acceleration',\n    wiggle: 'params',\n    rotation: 'rotation',\n    size: 'size',\n    color: 'color',\n    opacity: 'opacity',\n    angle: 'angle'\n  };\n\n  for (var i in this.updateMap) {\n    if (this.updateMap.hasOwnProperty(i)) {\n      this.updateCounts[this.updateMap[i]] = 0.0;\n      this.updateFlags[this.updateMap[i]] = false;\n\n      this._createGetterSetters(this[i], i);\n    }\n  }\n\n  this.bufferUpdateRanges = {};\n  this.attributeKeys = null;\n  this.attributeCount = 0; // Ensure that the value-over-lifetime property objects above\n  // have value and spread properties that are of the same length.\n  //\n  // Also, for now, make sure they have a length of 3 (min/max arguments here).\n\n  utils.ensureValueOverLifetimeCompliance(this.color, lifetimeLength, lifetimeLength);\n  utils.ensureValueOverLifetimeCompliance(this.opacity, lifetimeLength, lifetimeLength);\n  utils.ensureValueOverLifetimeCompliance(this.size, lifetimeLength, lifetimeLength);\n  utils.ensureValueOverLifetimeCompliance(this.angle, lifetimeLength, lifetimeLength);\n};\n\nSPE.Emitter.constructor = SPE.Emitter;\n\nSPE.Emitter.prototype._createGetterSetters = function (propObj, propName) {\n  'use strict';\n\n  var self = this;\n\n  for (var i in propObj) {\n    if (propObj.hasOwnProperty(i)) {\n      var name = i.replace('_', '');\n      Object.defineProperty(propObj, name, {\n        get: function (prop) {\n          return function () {\n            return this[prop];\n          };\n        }(i),\n        set: function (prop) {\n          return function (value) {\n            var mapName = self.updateMap[propName],\n                prevValue = this[prop],\n                length = SPE.valueOverLifetimeLength;\n\n            if (prop === '_rotationCenter') {\n              self.updateFlags.rotationCenter = true;\n              self.updateCounts.rotationCenter = 0.0;\n            } else if (prop === '_randomise') {\n              self.resetFlags[mapName] = value;\n            } else {\n              self.updateFlags[mapName] = true;\n              self.updateCounts[mapName] = 0.0;\n            }\n\n            self.group._updateDefines();\n\n            this[prop] = value; // If the previous value was an array, then make\n            // sure the provided value is interpolated correctly.\n\n            if (Array.isArray(prevValue)) {\n              SPE.utils.ensureValueOverLifetimeCompliance(self[propName], length, length);\n            }\n          };\n        }(i)\n      });\n    }\n  }\n};\n\nSPE.Emitter.prototype._setBufferUpdateRanges = function (keys) {\n  'use strict';\n\n  this.attributeKeys = keys;\n  this.attributeCount = keys.length;\n\n  for (var i = this.attributeCount - 1; i >= 0; --i) {\n    this.bufferUpdateRanges[keys[i]] = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n  }\n};\n\nSPE.Emitter.prototype._calculatePPSValue = function (groupMaxAge) {\n  'use strict';\n\n  var particleCount = this.particleCount; // Calculate the `particlesPerSecond` value for this emitter. It's used\n  // when determining which particles should die and which should live to\n  // see another day. Or be born, for that matter. The \"God\" property.\n\n  if (this.duration) {\n    this.particlesPerSecond = particleCount / (groupMaxAge < this.duration ? groupMaxAge : this.duration);\n  } else {\n    this.particlesPerSecond = particleCount / groupMaxAge;\n  }\n};\n\nSPE.Emitter.prototype._setAttributeOffset = function (startIndex) {\n  this.attributeOffset = startIndex;\n  this.activationIndex = startIndex;\n  this.activationEnd = startIndex + this.particleCount;\n};\n\nSPE.Emitter.prototype._assignValue = function (prop, index) {\n  'use strict';\n\n  switch (prop) {\n    case 'position':\n      this._assignPositionValue(index);\n\n      break;\n\n    case 'velocity':\n    case 'acceleration':\n      this._assignForceValue(index, prop);\n\n      break;\n\n    case 'size':\n    case 'opacity':\n      this._assignAbsLifetimeValue(index, prop);\n\n      break;\n\n    case 'angle':\n      this._assignAngleValue(index);\n\n      break;\n\n    case 'params':\n      this._assignParamsValue(index);\n\n      break;\n\n    case 'rotation':\n      this._assignRotationValue(index);\n\n      break;\n\n    case 'color':\n      this._assignColorValue(index);\n\n      break;\n  }\n};\n\nSPE.Emitter.prototype._assignPositionValue = function (index) {\n  'use strict';\n\n  var distributions = SPE.distributions,\n      utils = SPE.utils,\n      prop = this.position,\n      attr = this.attributes.position,\n      value = prop._value,\n      spread = prop._spread,\n      distribution = prop._distribution;\n\n  switch (distribution) {\n    case distributions.BOX:\n      utils.randomVector3(attr, index, value, spread, prop._spreadClamp);\n      break;\n\n    case distributions.SPHERE:\n      utils.randomVector3OnSphere(attr, index, value, prop._radius, prop._spread.x, prop._radiusScale, prop._spreadClamp.x, prop._distributionClamp || this.particleCount);\n      break;\n\n    case distributions.DISC:\n      utils.randomVector3OnDisc(attr, index, value, prop._radius, prop._spread.x, prop._radiusScale, prop._spreadClamp.x);\n      break;\n  }\n};\n\nSPE.Emitter.prototype._assignForceValue = function (index, attrName) {\n  'use strict';\n\n  var distributions = SPE.distributions,\n      utils = SPE.utils,\n      prop = this[attrName],\n      value = prop._value,\n      spread = prop._spread,\n      distribution = prop._distribution,\n      pos,\n      positionX,\n      positionY,\n      positionZ,\n      i;\n\n  switch (distribution) {\n    case distributions.BOX:\n      utils.randomVector3(this.attributes[attrName], index, value, spread);\n      break;\n\n    case distributions.SPHERE:\n      pos = this.attributes.position.typedArray.array;\n      i = index * 3; // Ensure position values aren't zero, otherwise no force will be\n      // applied.\n      // positionX = utils.zeroToEpsilon( pos[ i ], true );\n      // positionY = utils.zeroToEpsilon( pos[ i + 1 ], true );\n      // positionZ = utils.zeroToEpsilon( pos[ i + 2 ], true );\n\n      positionX = pos[i];\n      positionY = pos[i + 1];\n      positionZ = pos[i + 2];\n      utils.randomDirectionVector3OnSphere(this.attributes[attrName], index, positionX, positionY, positionZ, this.position._value, prop._value.x, prop._spread.x);\n      break;\n\n    case distributions.DISC:\n      pos = this.attributes.position.typedArray.array;\n      i = index * 3; // Ensure position values aren't zero, otherwise no force will be\n      // applied.\n      // positionX = utils.zeroToEpsilon( pos[ i ], true );\n      // positionY = utils.zeroToEpsilon( pos[ i + 1 ], true );\n      // positionZ = utils.zeroToEpsilon( pos[ i + 2 ], true );\n\n      positionX = pos[i];\n      positionY = pos[i + 1];\n      positionZ = pos[i + 2];\n      utils.randomDirectionVector3OnDisc(this.attributes[attrName], index, positionX, positionY, positionZ, this.position._value, prop._value.x, prop._spread.x);\n      break;\n  }\n\n  if (attrName === 'acceleration') {\n    var drag = utils.clamp(utils.randomFloat(this.drag._value, this.drag._spread), 0, 1);\n    this.attributes.acceleration.typedArray.array[index * 4 + 3] = drag;\n  }\n};\n\nSPE.Emitter.prototype._assignAbsLifetimeValue = function (index, propName) {\n  'use strict';\n\n  var array = this.attributes[propName].typedArray,\n      prop = this[propName],\n      utils = SPE.utils,\n      value;\n\n  if (utils.arrayValuesAreEqual(prop._value) && utils.arrayValuesAreEqual(prop._spread)) {\n    value = Math.abs(utils.randomFloat(prop._value[0], prop._spread[0]));\n    array.setVec4Components(index, value, value, value, value);\n  } else {\n    array.setVec4Components(index, Math.abs(utils.randomFloat(prop._value[0], prop._spread[0])), Math.abs(utils.randomFloat(prop._value[1], prop._spread[1])), Math.abs(utils.randomFloat(prop._value[2], prop._spread[2])), Math.abs(utils.randomFloat(prop._value[3], prop._spread[3])));\n  }\n};\n\nSPE.Emitter.prototype._assignAngleValue = function (index) {\n  'use strict';\n\n  var array = this.attributes.angle.typedArray,\n      prop = this.angle,\n      utils = SPE.utils,\n      value;\n\n  if (utils.arrayValuesAreEqual(prop._value) && utils.arrayValuesAreEqual(prop._spread)) {\n    value = utils.randomFloat(prop._value[0], prop._spread[0]);\n    array.setVec4Components(index, value, value, value, value);\n  } else {\n    array.setVec4Components(index, utils.randomFloat(prop._value[0], prop._spread[0]), utils.randomFloat(prop._value[1], prop._spread[1]), utils.randomFloat(prop._value[2], prop._spread[2]), utils.randomFloat(prop._value[3], prop._spread[3]));\n  }\n};\n\nSPE.Emitter.prototype._assignParamsValue = function (index) {\n  'use strict';\n\n  this.attributes.params.typedArray.setVec4Components(index, this.isStatic ? 1 : 0, 0.0, Math.abs(SPE.utils.randomFloat(this.maxAge._value, this.maxAge._spread)), SPE.utils.randomFloat(this.wiggle._value, this.wiggle._spread));\n};\n\nSPE.Emitter.prototype._assignRotationValue = function (index) {\n  'use strict';\n\n  this.attributes.rotation.typedArray.setVec3Components(index, SPE.utils.getPackedRotationAxis(this.rotation._axis, this.rotation._axisSpread), SPE.utils.randomFloat(this.rotation._angle, this.rotation._angleSpread), this.rotation._static ? 0 : 1);\n  this.attributes.rotationCenter.typedArray.setVec3(index, this.rotation._center);\n};\n\nSPE.Emitter.prototype._assignColorValue = function (index) {\n  'use strict';\n\n  SPE.utils.randomColorAsHex(this.attributes.color, index, this.color._value, this.color._spread);\n};\n\nSPE.Emitter.prototype._resetParticle = function (index) {\n  'use strict';\n\n  var resetFlags = this.resetFlags,\n      updateFlags = this.updateFlags,\n      updateCounts = this.updateCounts,\n      keys = this.attributeKeys,\n      key,\n      updateFlag;\n\n  for (var i = this.attributeCount - 1; i >= 0; --i) {\n    key = keys[i];\n    updateFlag = updateFlags[key];\n\n    if (resetFlags[key] === true || updateFlag === true) {\n      this._assignValue(key, index);\n\n      this._updateAttributeUpdateRange(key, index);\n\n      if (updateFlag === true && updateCounts[key] === this.particleCount) {\n        updateFlags[key] = false;\n        updateCounts[key] = 0.0;\n      } else if (updateFlag == true) {\n        ++updateCounts[key];\n      }\n    }\n  }\n};\n\nSPE.Emitter.prototype._updateAttributeUpdateRange = function (attr, i) {\n  'use strict';\n\n  var ranges = this.bufferUpdateRanges[attr];\n  ranges.min = Math.min(i, ranges.min);\n  ranges.max = Math.max(i, ranges.max);\n};\n\nSPE.Emitter.prototype._resetBufferRanges = function () {\n  'use strict';\n\n  var ranges = this.bufferUpdateRanges,\n      keys = this.bufferUpdateKeys,\n      i = this.bufferUpdateCount - 1,\n      key;\n\n  for (i; i >= 0; --i) {\n    key = keys[i];\n    ranges[key].min = Number.POSITIVE_INFINITY;\n    ranges[key].max = Number.NEGATIVE_INFINITY;\n  }\n};\n\nSPE.Emitter.prototype._onRemove = function () {\n  'use strict'; // Reset any properties of the emitter that were set by\n  // a group when it was added.\n\n  this.particlesPerSecond = 0;\n  this.attributeOffset = 0;\n  this.activationIndex = 0;\n  this.activeParticleCount = 0;\n  this.group = null;\n  this.attributes = null;\n  this.paramsArray = null;\n  this.age = 0.0;\n};\n\nSPE.Emitter.prototype._decrementParticleCount = function () {\n  'use strict';\n\n  --this.activeParticleCount; // TODO:\n  //  - Trigger event if count === 0.\n};\n\nSPE.Emitter.prototype._incrementParticleCount = function () {\n  'use strict';\n\n  ++this.activeParticleCount; // TODO:\n  //  - Trigger event if count === this.particleCount.\n};\n\nSPE.Emitter.prototype._checkParticleAges = function (start, end, params, dt) {\n  'use strict';\n\n  for (var i = end - 1, index, maxAge, age, alive; i >= start; --i) {\n    index = i * 4;\n    alive = params[index];\n\n    if (alive === 0.0) {\n      continue;\n    } // Increment age\n\n\n    age = params[index + 1];\n    maxAge = params[index + 2];\n\n    if (this.direction === 1) {\n      age += dt;\n\n      if (age >= maxAge) {\n        age = 0.0;\n        alive = 0.0;\n\n        this._decrementParticleCount();\n      }\n    } else {\n      age -= dt;\n\n      if (age <= 0.0) {\n        age = maxAge;\n        alive = 0.0;\n\n        this._decrementParticleCount();\n      }\n    }\n\n    params[index] = alive;\n    params[index + 1] = age;\n\n    this._updateAttributeUpdateRange('params', i);\n  }\n};\n\nSPE.Emitter.prototype._activateParticles = function (activationStart, activationEnd, params, dtPerParticle) {\n  'use strict';\n\n  var direction = this.direction;\n\n  for (var i = activationStart, index, dtValue; i < activationEnd; ++i) {\n    index = i * 4; // Don't re-activate particles that aren't dead yet.\n    // if ( params[ index ] !== 0.0 && ( this.particleCount !== 1 || this.activeMultiplier !== 1 ) ) {\n    //     continue;\n    // }\n\n    if (params[index] != 0.0 && this.particleCount !== 1) {\n      continue;\n    } // Increment the active particle count.\n\n\n    this._incrementParticleCount(); // Mark the particle as alive.\n\n\n    params[index] = 1.0; // Reset the particle\n\n    this._resetParticle(i); // Move each particle being activated to\n    // it's actual position in time.\n    //\n    // This stops particles being 'clumped' together\n    // when frame rates are on the lower side of 60fps\n    // or not constant (a very real possibility!)\n\n\n    dtValue = dtPerParticle * (i - activationStart);\n    params[index + 1] = direction === -1 ? params[index + 2] - dtValue : dtValue;\n\n    this._updateAttributeUpdateRange('params', i);\n  }\n};\n/**\n * Simulates one frame's worth of particles, updating particles\n * that are already alive, and marking ones that are currently dead\n * but should be alive as alive.\n *\n * If the emitter is marked as static, then this function will do nothing.\n *\n * @param  {Number} dt The number of seconds to simulate (deltaTime)\n */\n\n\nSPE.Emitter.prototype.tick = function (dt) {\n  'use strict';\n\n  if (this.isStatic) {\n    return;\n  }\n\n  if (this.paramsArray === null) {\n    this.paramsArray = this.attributes.params.typedArray.array;\n  }\n\n  var start = this.attributeOffset,\n      end = start + this.particleCount,\n      params = this.paramsArray,\n      // vec3( alive, age, maxAge, wiggle )\n  ppsDt = this.particlesPerSecond * this.activeMultiplier * dt,\n      activationIndex = this.activationIndex; // Reset the buffer update indices.\n\n  this._resetBufferRanges(); // Increment age for those particles that are alive,\n  // and kill off any particles whose age is over the limit.\n\n\n  this._checkParticleAges(start, end, params, dt); // If the emitter is dead, reset the age of the emitter to zero,\n  // ready to go again if required\n\n\n  if (this.alive === false) {\n    this.age = 0.0;\n    return;\n  } // If the emitter has a specified lifetime and we've exceeded it,\n  // mark the emitter as dead.\n\n\n  if (this.duration !== null && this.age > this.duration) {\n    this.alive = false;\n    this.age = 0.0;\n    return;\n  }\n\n  var activationStart = this.particleCount === 1 ? activationIndex : activationIndex | 0,\n      activationEnd = Math.min(activationStart + ppsDt, this.activationEnd),\n      activationCount = activationEnd - this.activationIndex | 0,\n      dtPerParticle = activationCount > 0 ? dt / activationCount : 0;\n\n  this._activateParticles(activationStart, activationEnd, params, dtPerParticle); // Move the activation window forward, soldier.\n\n\n  this.activationIndex += ppsDt;\n\n  if (this.activationIndex > end) {\n    this.activationIndex = start;\n  } // Increment the age of the emitter.\n\n\n  this.age += dt;\n};\n/**\n * Resets all the emitter's particles to their start positions\n * and marks the particles as dead if the `force` argument is\n * true.\n *\n * @param  {Boolean} [force=undefined] If true, all particles will be marked as dead instantly.\n * @return {Emitter}       This emitter instance.\n */\n\n\nSPE.Emitter.prototype.reset = function (force) {\n  'use strict';\n\n  this.age = 0.0;\n  this.alive = false;\n\n  if (force === true) {\n    var start = this.attributeOffset,\n        end = start + this.particleCount,\n        array = this.paramsArray,\n        attr = this.attributes.params.bufferAttribute;\n\n    for (var i = end - 1, index; i >= start; --i) {\n      index = i * 4;\n      array[index] = 0.0;\n      array[index + 1] = 0.0;\n    }\n\n    attr.updateRange.offset = 0;\n    attr.updateRange.count = -1;\n    attr.needsUpdate = true;\n  }\n\n  return this;\n};\n/**\n * Enables the emitter. If not already enabled, the emitter\n * will start emitting particles.\n *\n * @return {Emitter} This emitter instance.\n */\n\n\nSPE.Emitter.prototype.enable = function () {\n  'use strict';\n\n  this.alive = true;\n  return this;\n};\n/**\n * Disables th emitter, but does not instantly remove it's\n * particles fromt the scene. When called, the emitter will be\n * 'switched off' and just stop emitting. Any particle's alive will\n * be allowed to finish their lifecycle.\n *\n * @return {Emitter} This emitter instance.\n */\n\n\nSPE.Emitter.prototype.disable = function () {\n  'use strict';\n\n  this.alive = false;\n  return this;\n};\n/**\n * Remove this emitter from it's parent group (if it has been added to one).\n * Delgates to SPE.group.prototype.removeEmitter().\n *\n * When called, all particle's belonging to this emitter will be instantly\n * removed from the scene.\n *\n * @return {Emitter} This emitter instance.\n *\n * @see SPE.Group.prototype.removeEmitter\n */\n\n\nSPE.Emitter.prototype.remove = function () {\n  'use strict';\n\n  if (this.group !== null) {\n    this.group.removeEmitter(this);\n  } else {\n    console.error('Emitter does not belong to a group, cannot remove.');\n  }\n\n  return this;\n};","map":null,"metadata":{},"sourceType":"script"}